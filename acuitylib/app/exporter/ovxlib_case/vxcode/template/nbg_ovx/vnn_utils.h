/****************************************************************************
*   Generated by ACUITY #ACUITY_VERSION#
*
*   Neural Network Vnn Utils header file
****************************************************************************/
#ifndef _VNN_UTILS_H_
#define _VNN_UTILS_H_
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>
#include <errno.h>
#include <math.h>
#include <assert.h>
#include <VX/vx_khr_cnn.h>
#include <VX/viv_nn_compatibility.h>
#include <VX/vx_khr_import_kernel.h>


vx_int8    vnn_Fp32toInt8(vx_float32 val, vx_int8 fixedPointPos);
vx_float32 vnn_Int8toFp32(vx_int8 val, vx_int8 fixedPointPos);
vx_uint8   vnn_Fp32toUint8(vx_float32 val, vx_int32 zeroPoint, vx_float32 scale);
vx_float32 vnn_Uint8toFp32(vx_uint8 val, vx_int32 zeroPoint, vx_float32 scale);
vx_float32 vnn_Int16toFp32(vx_int16 val, vx_int8 fixedPointPos);
vx_int16   vnn_Fp32toInt16(vx_float32 val, vx_int8 fixedPointPos);
vx_int16   vnn_Fp32toFp16(vx_float32 val);
vx_float32 vnn_Fp16toFp32(const vx_uint16 in);

vx_uint32  vnn_GetTypeSize(vx_enum format);
vx_uint32  vnn_GetTensorSize(vx_tensor tensor);
vx_uint32  vnn_GetTensorBufferSize(vx_tensor tensor);
vx_status  vnn_CopyTensorToData(vx_tensor tensor,void **buf);
vx_status  vnn_CopyTensorToFloat32Data(vx_tensor tensor,vx_float32 **buf);
vx_status  vnn_CopyDataToTensor(vx_tensor tensor,void *buf);
vx_status  vnn_CopyFloat32DataToTensor(vx_tensor tensor,vx_float32 *buf);
vx_status  vnn_LoadTensorFromFile(vx_tensor tensor,char *filename);
vx_status  vnn_SaveTensorToFileAsFloat32(vx_tensor tensor,char *filename);

vx_status  vnn_ShowTensorTop5(vx_tensor tensor);

vx_status  vnn_LoadImageFromFile(vx_image image,char *filename);
#endif

