/****************************************************************************
*   Generated by ACUITY #ACUITY_VERSION#
*
*   Neural Network global header file
****************************************************************************/
#ifndef _VNN_GLOBAL_H_
#define _VNN_GLOBAL_H_

#include "vip_lite.h"

#ifdef _MSC_VER
#define snprintf _snprintf
#endif

#ifndef _cnt_of_array
#define _cnt_of_array( arr )            (sizeof( arr )/sizeof( arr[0] ))
#endif

#define _MAX_INPUT_NUM        16

#define _CHECK_PTR( ptr, lbl )      do {\
    if( NULL == ptr ) {\
        printf("Error: %s: %s at %d\n", __FILE__, __FUNCTION__, __LINE__);\
        goto lbl;\
    }\
} while(0)

#define _CHECK_STATUS( stat, lbl )  do {\
    if( VIP_SUCCESS != stat ) {\
        printf("Error: %s: %s at %d\n", __FILE__, __FUNCTION__, __LINE__);\
        goto lbl;\
    }\
} while(0)

typedef struct
{
    unsigned int output;
    unsigned int input;
} vsi_nn_rnn_external_connection_t;

typedef struct _vip_network_items {
    /* argv information. */
    char           *nbg_name;
    int             input_count;
    char          **input_names;
    int             output_count;
    char          **output_names;

    /* VIP lite buffer objects. */
    vip_network     network;
    vip_buffer     *input_buffers;
    vip_buffer     *output_buffers;
    /* For rnn connection */
    struct
    {
        vsi_nn_rnn_external_connection_t *connections;
        int conn_cnt;
    } rnn_conn;
} vip_network_items;

typedef union
{
    vip_uint32_t u;
    float f;
} _fp32_t;

vip_uint32_t type_get_bytes(
    const vip_enum type);

#endif
