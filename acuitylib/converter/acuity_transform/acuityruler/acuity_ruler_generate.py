# VIVANTE(R) CORPORATION END USER LICENSE AGREEMENT (EULA)
# 
# Copyright 2019 VIVANTE CORPORATION
# 
# NOTICE TO USER: PLEASE READ THIS CONTRACT CAREFULLY. BY DOWNLOADING OR INSTALLING
# THE SOFTWARE, YOU ("USER") AGREE TO BE BOUND BY THE FOLLOWING TERMS AND CONDITIONS.
# YOU AGREE THAT THIS AGREEMENT IS ENFORCEABLE LIKE ANY WRITTEN NEGOTIATED AGREEMENT
# SIGNED BY YOU. IF YOU DO NOT AGREE, DO NOT USE THIS SOFTWARE. IF YOU ACQUIRED THE
# SOFTWARE ON TANGIBLE MEDIA (e.g., CD-ROM) WITHOUT AN OPPORTUNITY TO REVIEW THIS
# LICENSE, AND YOU DO NOT ACCEPT THIS AGREEMENT, YOU MAY NOT USE THE SOFTWARE.
# 
# The package available for download or installation to User includes only binary,
# machine-executable instructions ("Software").
# 
# VIVANTE owns the Software and makes it available to User only under the terms and
# conditions set forth in this Agreement.
# 
# License: Subject to the terms of this Agreement, VIVANTE hereby grants to User a
# non-exclusive, non-transferable, royalty-free license to possess and to use the Software.
# User agrees not to disassemble, decompile or reverse engineer the Software. User
# acknowledges that certain parts of the Software may contain third party components
# that may be subject to restrictions, and expressly agrees not to attempt to modify
# or distribute these without first receiving consent from VIVANTE and/or the respective
# third party.
# 
# Government End Users: If you are acquiring the Software on behalf of any unit or
# agency of the United States Government, the following provisions apply. The Government
# agrees the Software was developed at private expense and is provided with "RESTRICTED RIGHTS".
# Use, duplication, or disclosure by the Government is subject to restrictions as set forth
# in DFARS 227.7202-1(a) and 227.7202-3(a) (1995), DFARS 252.227-7013(c)(1)(ii) (Oct 1988),
# FAR 12.212(a) (1995), FAR 52.227-19, (June 1987) or FAR 52.227-14(ALT III) (June 1987),
# as amended from time to time. In the event that this License, or any part thereof, is deemed
# inconsistent with the minimum rights identified in the Restricted Rights provisions, the
# minimum rights shall prevail.
# 
# No Other License: No rights or licenses are granted by VIVANTE under this License, expressly
# or by implication, with respect to any proprietary information or patent, copyright, trade
# secret or other intellectual property right owned or controlled by VIVANTE, except as expressly
# provided in this License.
# 
# Term: Vivante has the right to terminate this Agreement immediately upon written notice, which
# may include email, if User fails to comply with any term of this Agreement. Upon any such
# termination, User must give up all rights to the Software.
# 
# Support: VIVANTE has no obligation to support or to continue providing or updating any of the Software.
# 
# NO WARRANTY: THE SOFTWARE AND ANY OTHER MATERIALS PROVIDED BY VIVANTE TO USER HEREUNDER ARE
# PROVIDED "AS IS." VIVANTE DISCLAIMS ALL WARRANTIES, EXPRESS, IMPLIED OR STATUTORY, INCLUDING,
# WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR
# PURPOSE AND NONINFRINGEMENT. VIVANTE LICENSES THE SOFTWARE TO USER ON AN "AS IS" BASIS AND
# WITHOUT WARRANTY OF ANY KIND. VIVANTE AND ITS SUPPLIERS DO NOT AND CANNOT WARRANT THE PERFORMANCE
# OR RESULTS YOU MAY OBTAIN BY USING THE SOFTWARE. EXCEPT FOR ANY WARRANTY, CONDITION, REPRESENTATION
# OR TERM TO THE EXTENT TO WHICH THE SAME CANNOT OR MAY NOT BE EXCLUDED OR LIMITED BY LAW APPLICABLE
# TO YOU IN YOUR JURISDICTION, VIVANTE AND ITS SUPPLIERS MAKE NO WARRANTIES, CONDITIONS, REPRESENTATIONS
# OR TERMS, EXPRESS OR IMPLIED, WHETHER BY STATUTE, COMMON LAW, CUSTOM, USAGE OR OTHERWISE AS TO THE
# MATERIALS, SOFTWARE, OR ANY COMPONENT THEREOF, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT OF THIRD
# PARTY RIGHTS, INTEGRATION, MERCHANTABILITY, SATISFACTORY QUALITY OR FITNESS FOR ANY PARTICULAR PURPOSE.
# LIMITATION OF LIABILITY: IN NO EVENT WILL VIVANTE OR ITS SUPPLIERS BE LIABLE TO USER, USER'S CUSTOMERS,
# OR ANY OTHER PERSON OR ENTITY FOR ANY DAMAGES, CLAIMS OR COSTS WHATSOEVER ARISING FROM THIS AGREEMENT
# AND/OR YOUR USE OF THE SOFTWARE AND MATERIALS OR ANY COMPONENT THEREOF, INCLUDING WITHOUT LIMITATION
# ANY CONSEQUENTIAL, DIRECT, SPECIAL, PUNITIVE, INCIDENTAL, INDIRECT DAMAGES (WHETHER IN AN ACTION IN
# CONTRACT, TORT OR BASED ON WARRANTY), OR ANY LOST PROFITS OR LOST SAVINGS, EVEN IF A VIVANTE
# REPRESENTATIVE HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS, DAMAGES, CLAIMS OR COSTS OR FOR ANY
# CLAIM BY ANY THIRD PARTY. THE FOREGOING LIMITATIONS AND EXCLUSIONS APPLY TO THE EXTENT PERMITTED BY
# APPLICABLE LAW IN YOUR JURISDICTION. IN NO EVENT SHALL VIVANTE'S AGGREGATE LIABILITY TO USER OR ANY
# OTHER PERSON OR ENTITY CLAIMING THROUGH OR UNDER USER EXCEED THE AMOUNT OF MONEY ACTUALLY PAID BY USER
# TO VIVANTE FOR THE SOFTWARE OR ANY OTHER MATERIALS.

import json
import sys
import os
import dill

ruler_list = list()

def rule_pyfunc_def(func):
    def _wrap_func(*args, **kwargs):
        src = dill.source.getsource(func)
        src = src.replace('\r\n', '\n')
        src = src.replace('@rule_pyfunc_def\n', '')
        src = src.split('\n')
        return ['__rule_func_additional_args = ' + json.dumps(kwargs)] + src if len(kwargs) > 0 else src
    return _wrap_func

@rule_pyfunc_def
def r_fullconnect_op_2_fc_pre_condition(self, node, tensor):
    has_bias = self.attr_pick(node['fullconnect_op'], 'bias')
    fc = self.net.get_layer(node['fullconnect_op'])
    return not has_bias and fc.get_in_shape(0).rank == 2 and fc.get_in_shape(1).rank == 2

r_instancenorm = {
"ruler_name": "r_instancenorm",
"src_ops_alias": ["pooling", "squared_difference", "pooling_1", "Add", "Rsqrt", "Multiply", "Multiply_1", \
                  "Multiply_2", "Subtract", "Add_1", 'variable', 'variable_1', 'variable_2'],
"src_inter_flow": [["pooling:out0", "squared_difference:in1"],
                   ["squared_difference:out0", "pooling_1:in0"],
                   ["pooling_1:out0", "Add:in0"],  # add:in1
                   ["Add:out0", "Rsqrt:in0"],
                   ["Rsqrt:out0", "Multiply:in0"],  # multiply:in1
                   ["Multiply:out0", "Multiply_1:in1"],
                   ["Multiply_1:out0", "Add_1:in0"],
                   ["Multiply:out0", "Multiply_2:in1"],
                   ["pooling:out0", "Multiply_2:in0"],
                   ["Multiply_2:out0", "Subtract:in1"],
                   ["Subtract:out0", "Add_1:in1"],
                   ["variable:out0", "Multiply:in1"],
                   ["variable_1:out0", "Subtract:in0"],
                   ["variable_2:out0", "Add:in1"]
                   ],
"src_in_anchor": [["I:out0", "Multiply_1:in0"], ["I:out0", "squared_difference:in0"], ["I:out0", "pooling:in0"]],
"src_out_tensor": ["Add_1:out0"],
"acu_lys_alias": ["instancenormalize"],
"src_acu_in_tensor_map": [["I:out0", "instancenormalize:in0"]],
"src_acu_out_tensor_map": [["Add_1:out0", "instancenormalize:out0"]],
"param_map": {
    "instancenormalize": {
        'eps': ['FLOAT', 'CODE', "self.tensor_to_numpy(tensor['variable_2:out0'], 'data')"],
        'axis': ['INTS', 'CODE', "list(range(2, self.get_output_shape(node['Add_1'])[0]))"],
    }
},
"blob_map": {
    "instancenormalize": {'bias': ['CODE', "self.get_value_attr(node['variable_1'], 'data')"],
                          'scale': ['CODE', "self.get_value_attr(node['variable'], 'data')"], }
},

"acu_inter_flow": [],
"priority_tip": 0,
"extension": [
    ["CODE", "self.qnt_out_tensor(acu_ly['instancenormalize'], tensor['Add_1:out0'], 0)"],
],
"pre_condition": None,
"src_ops_main_version": None,
"src_ops_minior_version": [1, -1]}
ruler_list.append(r_instancenorm)

r_lstm = {
"ruler_name": "r_lstm",
"src_ops_alias": ["concat", "fullconnect", "split", "sigmoid", "sigmoid_1", "multiply", "tanh", \
                  'variable', "add", "sigmoid_2", "multiply_1", "add_1", "tanh_1", "multiply_2"],
"src_inter_flow": [["concat:out0", "fullconnect:in0"],
                   ["fullconnect:out0", "split:in0"],
                   ["split:out3", "sigmoid:in0"],
                   ["sigmoid:out0", "multiply_2:in0"],
                   ["split:out0", "sigmoid_1:in0"],
                   ["sigmoid_1:out0", "multiply:in0"],
                   ["multiply:out0", "add_1:in1"],
                   ["add_1:out0", "tanh_1:in0"],
                   ["tanh_1:out0", "multiply_2:in1"],
                   ["split:out1", "tanh:in0"],
                   ["tanh:out0", "multiply:in1"],
                   ["split:out2", "add:in0"],
                   ["variable:out0", "add:in1"],
                   ["add:out0", "sigmoid_2:in0"],
                   ["sigmoid_2:out0", "multiply_1:in0"],
                   ["multiply_1:out0", "add_1:in0"],
                   ],
"src_in_anchor": [["I:out0", "concat:in0"], ["I_1:out0", "concat:in1"], ["I_2:out0", "multiply_1:in1"]],
"src_out_tensor": ["multiply_2:out0", "add_1:out0"],
"acu_lys_alias": ["lstmunit"],
"src_acu_in_tensor_map": [["I:out0", "lstmunit:in0"], ["I_1:out0", "lstmunit:in1"], ["I_2:out0", "lstmunit:in2"]],
"src_acu_out_tensor_map": [["multiply_2:out0_0", "lstmunit:out0"], ["multiply_2:out0_1", "lstmunit:out1"],
                           ["add_1:out0_1", "lstmunit:out2"]],
"param_map": {
},
"blob_map": {
},

"acu_inter_flow": [],
"priority_tip": 0,
"extension": [],
"pre_condition": None,
"src_ops_main_version": None,
"src_ops_minior_version": [1, -1]}
# ruler_list.append(r_lstm)

r_conv_pool = {
"ruler_name": "r_conv_pooling",
"src_ops_alias": ["convolution", "pooling"],
"src_inter_flow": [["convolution:out0", "pooling:in0"]],
"src_in_anchor": [["I:out0", "convolution:in0"]],
"src_out_tensor": ["pooling:out0"],
"acu_lys_alias": ["convolutionrelupooling"],
"src_acu_in_tensor_map": [["I:out0", "convolutionrelupooling:in0"]],
"src_acu_out_tensor_map": [["pooling:out0", "convolutionrelupooling:out0"]],
"param_map": {
    "convolutionrelupooling": {
        'weights': ['INT', 'CODE', "self.attr_pick(node['convolution'], 'weights')"],
        'padding': ['STRING', 'CODE', "self.attr_pick(node['convolution'], 'padding')"],
        'bias': ['BOOL', 'CODE', "self.is_exist_params(node['convolution'], 'bias')"],
        'group_number': ['INT', 'CODE', "self.attr_pick(node['convolution'], 'group_number')"],
        'ksize_h': ['INT', 'CODE', "self.attr_pick(node['convolution'], 'ksize_h')"],
        'ksize_w': ['INT', 'CODE', "self.attr_pick(node['convolution'], 'ksize_w')"],
        'stride_h': ['INT', 'CODE', "self.attr_pick(node['convolution'], 'stride_h')"],
        'stride_w': ['INT', 'CODE', "self.attr_pick(node['convolution'], 'stride_w')"],
        'pad_h': ['INT', 'CODE', "self.attr_pick(node['convolution'], 'pad_h')"],
        'pad_w': ['INT', 'CODE', "self.attr_pick(node['convolution'], 'pad_w')"],
        'dilation': ['INTS', 'CODE', "self.attr_pick(node['convolution'], 'dilation')"],
        'pad_method': ['STRING', 'CODE', "self.attr_pick(node['convolution'], 'pad_method')"],
        'pad': ['INTS', 'CODE', "self.attr_pick(node['convolution'], 'pad')"],
        'enable_relu': ['BOOL', 'VALUE', False],
        'pooling_size': ['INT', 'CODE', "self.attr_pick(node['pooling'], 'ksize_h')"],
        'pooling_stride': ['INT', 'CODE', "self.attr_pick(node['pooling'], 'stride_h')"],
        'pooling_pad': ['INTS', 'CODE', "self.attr_pick(node['pooling'], 'pad')"],
    }
},
"blob_map": {"convolutionrelupooling": {'weight': ['CODE', "self.get_value_attr(node['convolution'],"
                                                           "'weight')"],
                                        'bias': ['CODE', "self.get_value_attr(node['convolution'],"
                                                         "'bias')"]}},
"acu_inter_flow": [],
"priority_tip": 0,
"pre_condition": None,
"extension": [
    ["CODE",
     "self.qnt_out_tensor(acu_ly['convolutionrelupooling'], tensor['pooling:out0'])"],
],
"src_ops_main_version": None,
"src_ops_minior_version": [1, -1]
}
# ruler_list.append(r_conv_pool)

r_fullconnect_op_to_matmul = {
"ruler_name": "r_fullconnect_op_to_matmul",
"src_ops_alias": ["fullconnect_op"],
"src_inter_flow": [],
"src_in_anchor": [["I_0:out0", "fullconnect_op:in0"], ["I_1:out0", "fullconnect_op:in1"]],
"src_out_tensor": ["fullconnect_op:out0"],
"acu_lys_alias": ["matmul"],
"src_acu_in_tensor_map": [["I_0:out0", "matmul:in0"], ["I_1:out0", "matmul:in1"]],
"src_acu_out_tensor_map": [["fullconnect_op:out0", "matmul:out0"]],
"acu_inter_flow": [],
"param_map": {
    "matmul": {
        'transpose_a': ['BOOL', 'VALUE', False],
        'transpose_b': ['BOOL', 'VALUE', True],
    }
},
"blob_map": {},
"priority_tip": 0,
"pre_condition": r_fullconnect_op_2_fc_pre_condition(),
"extension": [
    ["CODE",
     "self.qnt_out_tensor(acu_ly['matmul'], tensor['fullconnect_op:out0'])"],
],
"src_ops_main_version": None,
"src_ops_minior_version": [1, -1]
}
ruler_list.append(r_fullconnect_op_to_matmul)

r_transform_unit = {
"ruler_name": "r_transform_unit",
"src_ops_alias": ["add", "add_1", "reshape", "reshape_1", "fullconnect", "fullconnect_1", "reshape_2",
                  "reshape_3",
                  "gelu", "reshape_4", "reshape_5", "permute", "fullconnect_2", "matmul", "reshape_6", "softmax",
                  "permute_1", "layernormalize", "multiply", "reshape_7", "matmul_1", "split", "permute_2",
                  "permute_3", "reshape_8", "reshape_9", "reshape_10", "fullconnect_3", "reshape_11",
                  "layernormalize_1"],
"src_inter_flow": [["add_1:out0", "add:in0"], ["reshape:out0", "add:in1"], ["reshape_1:out0", "add_1:in1"],
                   ["fullconnect:out0", "reshape:in0"], ["fullconnect_1:out0", "reshape_1:in0"],
                   ["reshape_2:out0", "fullconnect:in0"], ["reshape_3:out0", "fullconnect_1:in0"],
                   ["gelu:out0", "reshape_2:in0"], ["reshape_4:out0", "reshape_3:in0"],
                   ["reshape_5:out0", "gelu:in0"],
                   ["permute:out0", "reshape_4:in0"], ["fullconnect_2:out0", "reshape_5:in0"],
                   ["matmul:out0", "permute:in0"], ["reshape_6:out0", "fullconnect_2:in0"],
                   ["softmax:out0", "matmul:in0"], ["permute_1:out0", "matmul:in1"],
                   ["layernormalize:out0", "reshape_6:in0"], ["multiply:out0", "softmax:in0"],
                   ["reshape_7:out0", "permute_1:in0"], ["add_1:out0", "layernormalize:in0"],
                   ["matmul_1:out0", "multiply:in0"], ["split:out2", "reshape_7:in0"],
                   ["permute_2:out0", "matmul_1:in0"], ["permute_3:out0", "matmul_1:in1"],
                   ["reshape_8:out0", "split:in0"], ["reshape_9:out0", "permute_2:in0"],
                   ["reshape_10:out0", "permute_3:in0"], ["fullconnect_3:out0", "reshape_8:in0"],
                   ["split:out0", "reshape_9:in0"], ["split:out1", "reshape_10:in0"],
                   ["reshape_11:out0", "fullconnect_3:in0"], ["layernormalize_1:out0", "reshape_11:in0"]],
"src_in_anchor": [["I_0:out0", "add_1:in0"], ["I_0:out0", "layernormalize_1:in0"], ["I_1:out0", "multiply:in1"]],
"src_out_tensor": ["add:out0"],
"acu_lys_alias": ["transform_unit"],
"src_acu_in_tensor_map": [["I_0:out0", "transform_unit:in0"], ["I_1:out0", "transform_unit:in1"]],
"src_acu_out_tensor_map": [["add:out0", "transform_unit:out0"]],
"acu_inter_flow": [],
"param_map": {"transform_unit": {
    'heads_num': ['INT', 'CODE', "self.attr_pick(node['reshape_9'], 'shape')[2]"],
    'axis_list': ['INTS', 'CODE', "self.attr_pick(node['layernormalize_1'], 'axis_list')"],
    'eps': ['FLOAT', 'CODE', "self.attr_pick(node['layernormalize_1'], 'eps')"],
    'shape': ['INTS', 'CODE', "self.attr_pick(node['reshape_11'], 'shape')"],
    'fc_weights': ['INT', 'CODE', "self.attr_pick(node['fullconnect_3'], 'weights')"],
    'fc_bias': ['BOOL', 'CODE', "self.attr_pick(node['fullconnect_3'], 'bias')"],
    'fc_regularize': ['BOOL', 'CODE', "self.attr_pick(node['fullconnect_3'], 'regularize')"],
    'fc_axis': ['INT', 'CODE', "self.attr_pick(node['fullconnect_3'], 'axis')"],
    'shape_1': ['INTS', 'CODE', "self.attr_pick(node['reshape_8'], 'shape')"],
    'dim': ['INT', 'CODE', "self.attr_pick(node['split'], 'dim')"],
    'slices': ['INTS', 'CODE', "self.attr_pick(node['split'], 'slices')"],
    'slices_tf': ['INTS', 'CODE', "self.attr_pick(node['split'], 'slices_tf')"],
    'unstack': ['BOOL', 'CODE', "self.attr_pick(node['split'], 'unstack')"],
    'shape_Q': ['INTS', 'CODE', "self.attr_pick(node['reshape_9'], 'shape')"],
    'shape_K': ['INTS', 'CODE', "self.attr_pick(node['reshape_10'], 'shape')"],
    'shape_V': ['INTS', 'CODE', "self.attr_pick(node['reshape_7'], 'shape')"],
    'perm_Q': ['INTS', 'CODE', "self.attr_pick(node['permute_2'], 'perm')"],
    'perm_K': ['INTS', 'CODE', "self.attr_pick(node['permute_3'], 'perm')"],
    'perm_V': ['INTS', 'CODE', "self.attr_pick(node['permute_1'], 'perm')"],
    'transpose_a': ['BOOL', 'CODE', "self.attr_pick(node['matmul_1'], 'transpose_a')"],
    'transpose_b': ['BOOL', 'CODE', "self.attr_pick(node['matmul_1'], 'transpose_b')"],
    'mul_axis': ['INT', 'CODE', "self.attr_pick(node['multiply'], 'axis')"],
    'mul_bias': ['BOOL', 'CODE', "self.attr_pick(node['multiply'], 'bias')"],
    'sf_axis': ['INT', 'CODE', "self.attr_pick(node['softmax'], 'sf_axis')"],
    'beta': ['FLOAT', 'CODE', "self.attr_pick(node['softmax'], 'beta')"],
    'transpose_a_1': ['BOOL', 'CODE', "self.attr_pick(node['matmul'], 'transpose_a')"],
    'transpose_b_1': ['BOOL', 'CODE', "self.attr_pick(node['matmul'], 'transpose_b')"],
    'perm': ['INTS', 'CODE', "self.attr_pick(node['permute'], 'perm')"],
    'shape_2': ['INTS', 'CODE', "self.attr_pick(node['reshape_4'], 'shape')"],
    'shape_3': ['INTS', 'CODE', "self.attr_pick(node['reshape_3'], 'shape')"],
    'fc2_weights': ['INT', 'CODE', "self.attr_pick(node['fullconnect_1'], 'weights')"],
    'fc2_bias': ['BOOL', 'CODE', "self.attr_pick(node['fullconnect_1'], 'bias')"],
    'fc2_regularize': ['BOOL', 'CODE', "self.attr_pick(node['fullconnect_1'], 'regularize')"],
    'fc2_axis': ['INT', 'CODE', "self.attr_pick(node['fullconnect_1'], 'axis')"],
    'shape_4': ['INTS', 'CODE', "self.attr_pick(node['reshape_1'], 'shape')"],
    'ln2_axis_list': ['INTS', 'CODE', "self.attr_pick(node['layernormalize'], 'axis_list')"],
    'ln2_eps': ['FLOAT', 'CODE', "self.attr_pick(node['layernormalize'], 'eps')"],
    'shape_5': ['INTS', 'CODE', "self.attr_pick(node['reshape_6'], 'shape')"],
    'fc3_weights': ['INT', 'CODE', "self.attr_pick(node['fullconnect_2'], 'weights')"],
    'fc3_bias': ['BOOL', 'CODE', "self.attr_pick(node['fullconnect_2'], 'bias')"],
    'fc3_regularize': ['BOOL', 'CODE', "self.attr_pick(node['fullconnect_2'], 'regularize')"],
    'fc3_axis': ['INT', 'CODE', "self.attr_pick(node['fullconnect_2'], 'axis')"],
    'shape_6': ['INTS', 'CODE', "self.attr_pick(node['reshape_5'], 'shape')"],
    'approximate': ['BOOL', 'CODE', "self.attr_pick(node['gelu'], 'approximate')"],
    'shape_7': ['INTS', 'CODE', "self.attr_pick(node['reshape_2'], 'shape')"],
    'fc4_weights': ['INT', 'CODE', "self.attr_pick(node['fullconnect'], 'weights')"],
    'fc4_bias': ['FLOAT', 'CODE', "self.attr_pick(node['fullconnect'], 'bias')"],
    'fc4_regularize': ['BOOL', 'CODE', "self.attr_pick(node['fullconnect'], 'regularize')"],
    'fc4_axis': ['INT', 'CODE', "self.attr_pick(node['fullconnect'], 'axis')"],
    'shape_8': ['INTS', 'CODE', "self.attr_pick(node['reshape'], 'shape')"],
}},

"blob_map": {"transform_unit": {
    'ln_scale': ['CODE', "self.get_value_attr(node['layernormalize_1'], 'scale')"],
    'ln_bias': ['CODE', "self.get_value_attr(node['layernormalize_1'], 'bias')"],
    'fc_weight': ['CODE', "self.get_value_attr(node['fullconnect_3'], 'weight')"],
    'fc_bias': ['CODE', "self.get_value_attr(node['fullconnect_3'], 'bias')"],
    # 'mul_scale': ['CODE', "self.get_value_attr(node['multiply'], 'scale')"],
    # 'mul_bias': ['CODE', "self.get_value_attr(node['multiply'], 'bias')"],
    'fc2_weight': ['CODE', "self.get_value_attr(node['fullconnect_1'], 'weight')"],
    'fc2_bias': ['CODE', "self.get_value_attr(node['fullconnect_1'], 'bias')"],
    'ln2_scale': ['CODE', "self.get_value_attr(node['layernormalize'], 'scale')"],
    'ln2_bias': ['CODE', "self.get_value_attr(node['layernormalize'], 'bias')"],
    'fc3_weight': ['CODE', "self.get_value_attr(node['fullconnect_2'], 'weight')"],
    'fc3_bias': ['CODE', "self.get_value_attr(node['fullconnect_2'], 'bias')"],
    'fc4_weight': ['CODE', "self.get_value_attr(node['fullconnect'], 'weight')"],
    'fc4_bias': ['CODE', "self.get_value_attr(node['fullconnect'], 'bias')"],
}},
"priority_tip": 0,
"pre_condition": None,
"src_ops_main_version": None,
"src_ops_minior_version": [1, -1]}
# ruler_list.append(r_transform_unit)  # for transform_unit layer

r_attention_trans = {
"ruler_name": "r_transform_unit",
"src_ops_alias": ["add", "add_1", "reshape", "reshape_1", "fullconnect", "fullconnect_1", "reshape_2",
                  "reshape_3", "gelu", "reshape_4", "reshape_5", "permute", "fullconnect_2", "matmul",
                  "reshape_6", "softmax", "permute_1", "layernormalize", "multiply", "reshape_7", "matmul_1",
                  "split", "permute_2", "permute_3", "reshape_8", "reshape_9", "reshape_10", "fullconnect_3",
                  "reshape_11", "layernormalize_1"],
"src_inter_flow": [["add_1:out0", "add:in0"], ["reshape:out0", "add:in1"], ["reshape_1:out0", "add_1:in1"],
                   ["fullconnect:out0", "reshape:in0"], ["fullconnect_1:out0", "reshape_1:in0"],
                   ["reshape_2:out0", "fullconnect:in0"], ["reshape_3:out0", "fullconnect_1:in0"],
                   ["gelu:out0", "reshape_2:in0"], ["reshape_4:out0", "reshape_3:in0"],
                   ["reshape_5:out0", "gelu:in0"], ["permute:out0", "reshape_4:in0"],
                   ["fullconnect_2:out0", "reshape_5:in0"], ["matmul:out0", "permute:in0"],
                   ["reshape_6:out0", "fullconnect_2:in0"], ["softmax:out0", "matmul:in0"],
                   ["permute_1:out0", "matmul:in1"], ["layernormalize:out0", "reshape_6:in0"],
                   ["multiply:out0", "softmax:in0"], ["reshape_7:out0", "permute_1:in0"],
                   ["add_1:out0", "layernormalize:in0"], ["matmul_1:out0", "multiply:in0"],
                   ["split:out2", "reshape_7:in0"], ["permute_2:out0", "matmul_1:in0"],
                   ["permute_3:out0", "matmul_1:in1"], ["reshape_8:out0", "split:in0"],
                   ["reshape_9:out0", "permute_2:in0"], ["reshape_10:out0", "permute_3:in0"],
                   ["fullconnect_3:out0", "reshape_8:in0"], ["split:out0", "reshape_9:in0"],
                   ["split:out1", "reshape_10:in0"], ["reshape_11:out0", "fullconnect_3:in0"],
                   ["layernormalize_1:out0", "reshape_11:in0"]],
"src_in_anchor": [["I_0:out0", "add_1:in0"], ["I_0:out0", "layernormalize_1:in0"], ["I_1:out0", "multiply:in1"]],
"src_out_tensor": ["add:out0"],
"acu_lys_alias": ["permute", "add", "add_1", "reshape", "reshape_2", "permute_1", "permute_2", "convolution",
                  "permute_3", "convolution_1", "permute_4", "permute_5", "reshape_4",
                  "reshape_5", "gelu", "matmul", "permute_6", "reshape_8",
                  "convolution_2", "permute_8", "softmax", "permute_9", "convolution_3", "reshape_9",
                  "permute_11", "multiply", "reshape_10", "matmul_1", "layernormalize",
                  "reshape_11", "layernormalize_1", "reshape_12", "permute_16",
                  "permute_18", "convolution_4", "convolution_5", "permute_19", "permute_20",
                  "reshape_13", "reshape_14"],
"src_acu_in_tensor_map": [["I_0:out0", "permute_3:in0"], ["I_1:out0", "multiply:in1"]],
"src_acu_out_tensor_map": [["add:out0", "permute:out0"]],
"acu_inter_flow": [["add:out0", "permute:in0"], ["add_1:out0", "add:in0"], ["reshape:out0", "add:in1"],
                   ["permute_3:out0", "add_1:in0"],
                   ["reshape_2:out0", "add_1:in1"], ["permute_1:out0", "reshape:in0"],
                   ["permute_2:out0", "reshape_2:in0"], ["convolution:out0", "permute_1:in0"],
                   ["convolution_1:out0", "permute_2:in0"], ["permute_4:out0", "convolution:in0"],
                   ["permute_5:out0", "convolution_1:in0"],
                   ["reshape_4:out0", "permute_4:in0"], ["reshape_5:out0", "permute_5:in0"],
                   ["gelu:out0", "reshape_4:in0"],
                   ["matmul:out0", "reshape_5:in0"], ["permute_6:out0", "gelu:in0"],
                   ["reshape_8:out0", "matmul:in0"],
                   ["softmax:out0", "matmul:in1"],
                   ["convolution_2:out0", "permute_6:in0"], ["permute_8:out0", "reshape_8:in0"],
                   ["permute_9:out0", "convolution_2:in0"], ["convolution_3:out0", "permute_8:in0"],
                   ["multiply:out0", "softmax:in0"],
                   ["reshape_9:out0", "permute_9:in0"], ["permute_11:out0", "convolution_3:in0"],
                   ["layernormalize:out0", "reshape_9:in0"], ["reshape_10:out0", "permute_11:in0"],
                   ["matmul_1:out0", "multiply:in0"],
                   ["layernormalize_1:out0", "reshape_10:in0"], ["reshape_12:out0", "matmul_1:in0"],
                   ["reshape_11:out0", "matmul_1:in1"], ["add_1:out0", "layernormalize:in0"],
                   ["permute_16:out0", "reshape_11:in0"],
                   ["permute_18:out0", "reshape_12:in0"], ["convolution_4:out0", "permute_16:in0"],
                   ["permute_3:out0", "layernormalize_1:in0"], ["convolution_5:out0", "permute_18:in0"],
                   ["permute_19:out0", "convolution_4:in0"],
                   ["permute_20:out0", "convolution_5:in0"], ["reshape_13:out0", "permute_19:in0"],
                   ["reshape_14:out0", "permute_20:in0"],
                   ["layernormalize_1:out0", "reshape_13:in0"], ["layernormalize_1:out0", "reshape_14:in0"]],

"param_map": {
    "permute_3": {"perm": ['INTS', 'VALUE', [0, 2, 1]]},
    "layernormalize_1": {
        # "axis_list": ['INTS', 'CODE', "self.attr_pick(node['layernormalize_1'], 'axis_list')"],
        "axis_list": ['INTS', 'VALUE', [-2]],
        "eps": ['FLOAT', 'CODE', "self.attr_pick(node['layernormalize_1'], 'eps')"]},
    "reshape_10": {
        "shape": ['INTS', 'CODE',
                  "self.convert_shape(self.shape_pick(node['layernormalize_1']), 2, 1, perm=[0,2,1])"], },
    "reshape_14": {
        "shape": ['INTS', 'CODE',
                  "self.convert_shape(self.shape_pick(node['layernormalize_1']), 2, 1, perm=[0,2,1])"]},
    "reshape_13": {
        "shape": ['INTS', 'CODE',
                  "self.convert_shape(self.shape_pick(node['layernormalize_1']), 2, 1, perm=[0,2,1])"]},
    "permute_11": {"perm": ['INTS', 'VALUE', [0, 2, 3, 1]]},
    "permute_20": {"perm": ['INTS', 'VALUE', [0, 2, 3, 1]]},
    "permute_19": {"perm": ['INTS', 'VALUE', [0, 2, 3, 1]]},
    "convolution_3": {"weights": ['INT', 'CODE', "self.attr_pick(node['fullconnect_3'], 'weights')/3"],
                      "bias": ['BOOL', 'CODE', "self.attr_pick(node['fullconnect_3'], 'bias')"],
                      "pad_method": ["STRING", "VALUE", "padding_const"],
                      },
    "convolution_5": {"weights": ['INT', 'CODE', "self.attr_pick(node['fullconnect_3'], 'weights')/3"],
                      "bias": ['BOOL', 'CODE', "self.attr_pick(node['fullconnect_3'], 'bias')"],
                      "pad_method": ["STRING", "VALUE", "padding_const"],
                      },
    "convolution_4": {"weights": ['INT', 'CODE', "self.attr_pick(node['fullconnect_3'], 'weights')/3"],
                      "bias": ['BOOL', 'CODE', "self.attr_pick(node['fullconnect_3'], 'bias')"],
                      "pad_method": ["STRING", "VALUE", "padding_const"],
                      },
    "permute_8": {"perm": ['INTS', 'VALUE', [0, 3, 1, 2]]},
    "permute_18": {"perm": ['INTS', 'VALUE', [0, 3, 1, 2]]},
    "permute_16": {"perm": ['INTS', 'VALUE', [0, 3, 1, 2]]},
    "reshape_8": {"shape": ['INTS', 'CODE',  "self.split_shape(self.convert_shape(self.shape_pick(node['split']),"
                                             "perm=[0,2,1]), 12)"]},
    "reshape_12": {"shape": ['INTS', 'CODE',  "self.split_shape(self.convert_shape(self.shape_pick(node['split']),"
                                             "perm=[0,2,1]), 12)"]},
    "reshape_11": {"shape": ['INTS', 'CODE',  "self.split_shape(self.convert_shape(self.shape_pick(node['split']),"
                                             "perm=[0,2,1]), 12)"]},
    "matmul_1": {"transpose_a": ['BOOL', 'VALUE', True],
                 "transpose_b": ['BOOL', 'VALUE', False],
                 },
    "multiply": {"axis": ['INT', 'CODE', "self.attr_pick(node['multiply'], 'axis')"],
                 "bias": ['BOOL', 'CODE', "self.attr_pick(node['multiply'], 'bias')"],
                 },
    "softmax": {'sf_axis': ['INT', 'VALUE', -2],
                # 'sf_axis': ['INT', 'CODE', "self.attr_pick(node['softmax'], 'sf_axis')"],
                'beta': ['FLOAT', 'CODE', "self.attr_pick(node['softmax'], 'beta')"]},
    "matmul": {"transpose_a": ['BOOL', 'CODE', "self.attr_pick(node['matmul'], 'transpose_a')"],
               "transpose_b": ['BOOL', 'CODE', "self.attr_pick(node['matmul'], 'transpose_b')"]},
    "reshape_5": {
        "shape": ['INTS', 'CODE',
                  "self.convert_shape(self.shape_pick(node['layernormalize_1']), 2, 1, perm=[0,2,1])"],},
    # todo: fix me, not layernormal op may
    "permute_5": {"perm": ['INTS', 'VALUE', [0, 2, 3, 1]]},
    "convolution_1": {"weights": ['INT', 'CODE', "self.attr_pick(node['fullconnect_1'], 'weights')"],
                      "bias": ['BOOL', 'CODE', "self.attr_pick(node['fullconnect_1'], 'bias')"],
                      "pad_method": ["STRING", "VALUE", "padding_const"]},
    "permute_2": {"perm": ['INTS', 'VALUE', [0, 3, 1, 2]]},
    "reshape_2": {
        "shape": ['INTS', 'CODE', "self.convert_shape(self.shape_pick(node['layernormalize_1']),perm=[0,2,1])"]},
    # todo: layer_norm_1?
    "layernormalize": {"axis_list": ['INTS', 'VALUE', [-2]],
                       "eps": ['FLOAT', 'CODE', "self.attr_pick(node['layernormalize'], 'eps')"], },
    "reshape_9": {
        "shape": ['INTS', 'CODE',
                  "self.convert_shape(self.shape_pick(node['layernormalize']), 2, 1, perm=[0,2,1])"], },
    "permute_9": {"perm": ['INTS', 'VALUE', [0, 2, 3, 1]]},
    "convolution_2": {"weights": ['INT', 'CODE', "self.attr_pick(node['fullconnect_2'], 'weights')"],
                      "bias": ['BOOL', 'CODE', "self.attr_pick(node['fullconnect_2'], 'bias')"],
                      "pad_method": ["STRING", "VALUE", "padding_const"], },
    "permute_6": {"perm": ['INTS', 'VALUE', [0, 3, 1, 2]]},
    "reshape_4": {
        "shape": ['INTS', 'CODE', "self.convert_shape(self.shape_pick(node['gelu']), index=2, value=1,"
                                  "perm=[0,2,1])"]},  # 1, 3072, 1, 1024
    "permute_4": {"perm": ['INTS', 'VALUE', [0, 2, 3, 1]]},
    "convolution": {"weights": ['INT', 'CODE', "self.attr_pick(node['fullconnect'], 'weights')"],
                    "bias": ['BOOL', 'CODE', "self.attr_pick(node['fullconnect'], 'bias')"],
                    "pad_method": ["STRING", "VALUE", "padding_const"], },
    "permute_1": {"perm": ['INTS', 'VALUE', [0, 3, 1, 2]]},
    "reshape": {"shape": ['INTS', 'CODE', "self.convert_shape(self.shape_pick(node['add_1']), perm=[0,2,1])"]},
    "permute": {"perm": ['INTS', 'VALUE', [0, 2, 1]], },
},
"blob_map": {
    "layernormalize_1": {
        'scale': ['CODE', "self.reshape_const_tensor(self.get_value_attr(node['layernormalize_1'], 'scale'))"],
        'bias': ['CODE', "self.reshape_const_tensor(self.get_value_attr(node['layernormalize_1'], 'bias'))"],
    },
    "layernormalize": {
        'scale': ['CODE', "self.reshape_const_tensor(self.get_value_attr(node['layernormalize'], 'scale'))"],
        'bias': ['CODE', "self.reshape_const_tensor(self.get_value_attr(node['layernormalize'], 'bias'))"], },
    "convolution_3": {
        'weight': ['CODE',
                   "self.split_const_tensor(self.get_value_attr(node['fullconnect_3'], 'weight'),"
                   "row_start=self.shape_pick(node['fullconnect_3'])[1]/3*2, "
                   "row_end=self.shape_pick(node['fullconnect_3'])[1],"
                   "shape=[1,1,self.shape_pick(node['fullconnect_3'])[1]/3, "
                   "self.shape_pick(node['fullconnect_3'])[1]/3])"],
        'bias': ['CODE', "self.split_const_tensor(self.get_value_attr(node['fullconnect_3'], 'bias'),"
                         "column_start=self.shape_pick(node['fullconnect_3'])[1]/3*2)"],
    },
    "convolution_5": {
        'weight': ['CODE',
                   "self.split_const_tensor(self.get_value_attr(node['fullconnect_3'], 'weight'),"
                   "row_start=self.shape_pick(node['fullconnect_3'])[1]/3,"  # 768
                   "row_end=self.shape_pick(node['fullconnect_3'])[1]/3*2,"  # 768*2
                   "shape=[1,1,self.shape_pick(node['fullconnect_3'])[1]/3,"  # [1,1,768,768]
                   "self.shape_pick(node['fullconnect_3'])[1]/3])"],
        'bias': ['CODE',
                 "self.split_const_tensor(self.get_value_attr(node['fullconnect_3'], 'bias'),"
                 "column_start=self.shape_pick(node['fullconnect_3'])[1]/3,"  # 768
                 "column_end=self.shape_pick(node['fullconnect_3'])[1]/3*2)"],  # 768*2
    },
    "convolution_4": {
        'weight': ['CODE',
                   "self.split_const_tensor(self.get_value_attr(node['fullconnect_3'], 'weight'),"
                   "row_end=self.shape_pick(node['fullconnect_3'])[1]/3,"
                   "shape=[1,1,self.shape_pick(node['fullconnect_3'])[1]/3,"  # [1,1,768,768]
                   "self.shape_pick(node['fullconnect_3'])[1]/3])"],
        'bias': ['CODE',
                 "self.split_const_tensor(self.get_value_attr(node['fullconnect_3'], 'bias'),"
                 "column_end=self.shape_pick(node['fullconnect_3'])[1]/3)"],
    },
    "convolution_1": {
        'weight': ['CODE', "self.get_value_attr(node['fullconnect_1'], 'weight', "
                "shape=[1,1,self.shape_pick(node['reshape_3'])[-1],self.shape_pick(node['fullconnect_1'])[-1]])"],
        # shape=[1,1,768,768]),
        'bias': ['CODE', "self.get_value_attr(node['fullconnect_1'], 'bias')"],
    },
    "convolution_2": {
        'weight': ['CODE', "self.get_value_attr(node['fullconnect_2'], 'weight', "
                "shape=[1,1,self.shape_pick(node['reshape_6'])[-1],self.shape_pick(node['fullconnect_2'])[-1]])"],
                #shape=[1,1,768,3072]),
        'bias': ['CODE', "self.get_value_attr(node['fullconnect_2'], 'bias')"],
    },
    "convolution": {
        'weight': ['CODE', "self.get_value_attr(node['fullconnect'], 'weight',"
                  "shape=[1,1,self.shape_pick(node['reshape_2'])[-1],self.shape_pick(node['fullconnect'])[-1]])"],
                  # "shape=[1,1,3072,768]),
        'bias': ['CODE', "self.get_value_attr(node['fullconnect'], 'bias')"],
    },
},
"priority_tip": 0,
"pre_condition": None,
"src_ops_main_version": None,
"src_ops_minior_version": [1, -1]}
ruler_list.append(r_attention_trans)

r_bucktize_ut = {
"ruler_name": "r_bucktize",
"src_ops_alias": ["add", "add_1", "cast", "add_2", "cast_1", "greater", "variable", "cast_2", "greater_1", "gather",
                  "greater_2", "gather_1", "variable_1", "gather_2", "variable_2", "variable_3"],
"src_inter_flow": [["add_1:out0", "add:in0"], ["cast:out0", "add:in1"], ["add_2:out0", "add_1:in0"],
                   ["cast_1:out0", "add_1:in1"], ["greater:out0", "cast:in0"], ["variable:out0", "add_2:in0"],
                   ["cast_2:out0", "add_2:in1"], ["greater_1:out0", "cast_1:in0"], ["gather:out0", "greater:in1"],
                   ["greater_2:out0", "cast_2:in0"], ["gather_1:out0", "greater_1:in1"],
                   ["variable_1:out0", "gather:in1"], ["gather_2:out0", "greater_2:in1"],
                   ["variable_2:out0", "gather_1:in1"], ["variable_3:out0", "gather_2:in1"]],
"src_in_anchor": [["I_0:out0", "greater:in0"], ["I_0:out0", "greater_1:in0"], ["I_0:out0", "greater_2:in0"],
                  ["I_1:out0", "gather_1:in0"], ["I_1:out0", "gather:in0"], ["I_1:out0", "gather_2:in0"]],
"src_out_tensor": ["add:out0"],
"acu_lys_alias": ["bucketize"],
"src_acu_in_tensor_map": [["I_0:out0", "bucketize:in0"], ["I_1:out0", "bucketize:in1"]],
"src_acu_out_tensor_map": [["add:out0", "bucketize:out0"]],
"acu_inter_flow": [],
"param_map": {"bucketize": {"right": ['BOOL', 'VALUE', False],
                            "out_int32": ['BOOL', 'VALUE', False],}},
"blob_map": {"bucketize": {}},
"priority_tip": 0,
"pre_condition": None,
"src_ops_main_version": None,
"src_ops_minior_version": [1, -1]}
# ruler_list.append(r_bucktize_ut)

r_bucktize = {
"ruler_name": "r_bucktize",
"src_ops_alias": ["add", "add_1", "cast", "add_2", "cast_1", "greater", "add_3", "cast_2", "greater_1", "split",
                  "add_4", "cast_3", "greater_2", "add_5", "cast_4", "greater_3", "add_6", "cast_5", "greater_4",
                  "add_7", "cast_6", "greater_5", "add_8", "cast_7", "greater_6", "add_9", "cast_8", "greater_7",
                  "add_10", "cast_9", "greater_8", "add_11", "cast_10", "greater_9", "add_12", "cast_11", "greater_10",
                  "add_13", "cast_12", "greater_11", "add_14", "cast_13", "greater_12", "add_15", "cast_14",
                  "greater_13", "add_16", "cast_15", "greater_14", "add_17", "cast_16", "greater_15", "add_18",
                  "cast_17", "greater_16", "add_19", "cast_18", "greater_17", "add_20", "cast_19", "greater_18",
                  "add_21", "cast_20", "greater_19", "add_22", "cast_21", "greater_20", "add_23", "cast_22",
                  "greater_21", "add_24", "cast_23", "greater_22", "add_25", "cast_24", "greater_23", "add_26",
                  "cast_25", "greater_24", "add_27", "cast_26", "greater_25", "add_28", "cast_27", "greater_26",
                  "add_29", "cast_28", "greater_27", "add_30", "cast_29", "greater_28", "add_31", "cast_30",
                  "greater_29", "add_32", "cast_31", "greater_30", "add_33", "cast_32", "greater_31", "add_34",
                  "cast_33", "greater_32", "add_35", "cast_34", "greater_33", "add_36", "cast_35", "greater_34",
                  "add_37", "cast_36", "greater_35", "add_38", "cast_37", "greater_36", "add_39", "cast_38",
                  "greater_37", "add_40", "cast_39", "greater_38", "add_41", "cast_40", "greater_39", "add_42",
                  "cast_41", "greater_40", "add_43", "cast_42", "greater_41", "add_44", "cast_43", "greater_42",
                  "add_45", "cast_44", "greater_43", "add_46", "cast_45", "greater_44", "add_47", "cast_46",
                  "greater_45", "add_48", "cast_47", "greater_46", "add_49", "cast_48", "greater_47", "add_50",
                  "cast_49", "greater_48", "add_51", "cast_50", "greater_49", "add_52", "cast_51", "greater_50",
                  "add_53", "cast_52", "greater_51", "add_54", "cast_53", "greater_52", "add_55", "cast_54",
                  "greater_53", "add_56", "cast_55", "greater_54", "add_57", "cast_56", "greater_55", "add_58",
                  "cast_57", "greater_56", "add_59", "cast_58", "greater_57", "add_60", "cast_59", "greater_58",
                  "add_61", "cast_60", "greater_59", "add_62", "cast_61", "greater_60", "add_63", "cast_62",
                  "greater_61", "add_64", "cast_63", "greater_62", "add_65", "cast_64", "greater_63", "add_66",
                  "cast_65", "greater_64", "add_67", "cast_66", "greater_65", "add_68", "cast_67", "greater_66",
                  "add_69", "cast_68", "greater_67", "add_70", "cast_69", "greater_68", "add_71", "cast_70",
                  "greater_69", "add_72", "cast_71", "greater_70", "add_73", "cast_72", "greater_71", "add_74",
                  "cast_73", "greater_72", "add_75", "cast_74", "greater_73", "add_76", "cast_75", "greater_74",
                  "add_77", "cast_76", "greater_75", "add_78", "cast_77", "greater_76", "add_79", "cast_78",
                  "greater_77", "add_80", "cast_79", "greater_78", "add_81", "cast_80", "greater_79", "add_82",
                  "cast_81", "greater_80", "add_83", "cast_82", "greater_81", "add_84", "cast_83", "greater_82",
                  "add_85", "cast_84", "greater_83", "add_86", "cast_85", "greater_84", "add_87", "cast_86",
                  "greater_85", "add_88", "cast_87", "greater_86", "add_89", "cast_88", "greater_87", "add_90",
                  "cast_89", "greater_88", "add_91", "cast_90", "greater_89", "add_92", "cast_91", "greater_90",
                  "add_93", "cast_92", "greater_91", "add_94", "cast_93", "greater_92", "add_95", "cast_94",
                  "greater_93", "add_96", "cast_95", "greater_94", "add_97", "cast_96", "greater_95", "add_98",
                  "cast_97", "greater_96", "add_99", "cast_98", "greater_97", "add_100", "cast_99", "greater_98",
                  "add_101", "cast_100", "greater_99", "add_102", "cast_101", "greater_100", "add_103", "cast_102",
                  "greater_101", "add_104", "cast_103", "greater_102", "add_105", "cast_104", "greater_103", "add_106",
                  "cast_105", "greater_104", "add_107", "cast_106", "greater_105", "add_108", "cast_107",
                  "greater_106", "add_109", "cast_108", "greater_107", "add_110", "cast_109", "greater_108",
                  "add_111", "cast_110", "greater_109", "add_112", "cast_111", "greater_110", "add_113", "cast_112",
                  "greater_111", "add_114", "cast_113", "greater_112", "add_115", "cast_114", "greater_113", "add_116",
                  "cast_115", "greater_114", "add_117", "cast_116", "greater_115", "add_118", "cast_117",
                  "greater_116", "add_119", "cast_118", "greater_117", "add_120", "cast_119", "greater_118",
                  "add_121", "cast_120", "greater_119", "add_122", "cast_121", "greater_120", "add_123", "cast_122",
                  "greater_121", "add_124", "cast_123", "greater_122", "add_125", "cast_124", "greater_123", "add_126",
                  "cast_125", "greater_124", "add_127", "cast_126", "greater_125", "add_128", "cast_127",
                  "greater_126", "add_129", "cast_128", "greater_127", "add_130", "cast_129", "greater_128",
                  "add_131", "cast_130", "greater_129", "add_132", "cast_131", "greater_130", "add_133", "cast_132",
                  "greater_131", "add_134", "cast_133", "greater_132", "add_135", "cast_134", "greater_133", "add_136",
                  "cast_135", "greater_134", "add_137", "cast_136", "greater_135", "add_138", "cast_137",
                  "greater_136", "add_139", "cast_138", "greater_137", "add_140", "cast_139", "greater_138", "add_141",
                  "cast_140", "greater_139", "add_142", "cast_141", "greater_140", "add_143", "cast_142",
                  "greater_141", "add_144", "cast_143", "greater_142", "add_145", "cast_144", "greater_143", "add_146",
                  "cast_145", "greater_144", "add_147", "cast_146", "greater_145", "add_148", "cast_147",
                  "greater_146", "add_149", "cast_148", "greater_147", "add_150", "cast_149", "greater_148", "add_151",
                  "cast_150", "greater_149", "add_152", "cast_151", "greater_150", "add_153", "cast_152",
                  "greater_151", "add_154", "cast_153", "greater_152", "add_155", "cast_154", "greater_153", "add_156",
                  "cast_155", "greater_154", "add_157", "cast_156", "greater_155", "add_158", "cast_157",
                  "greater_156", "add_159", "cast_158", "greater_157", "add_160", "cast_159", "greater_158", "add_161",
                  "cast_160", "greater_159", "add_162", "cast_161", "greater_160", "add_163", "cast_162",
                  "greater_161", "add_164", "cast_163", "greater_162", "add_165", "cast_164", "greater_163", "add_166",
                  "cast_165", "greater_164", "add_167", "cast_166", "greater_165", "add_168", "cast_167",
                  "greater_166", "add_169", "cast_168", "greater_167", "add_170", "cast_169", "greater_168",
                  "add_171", "cast_170", "greater_169", "add_172", "cast_171", "greater_170", "add_173", "cast_172",
                  "greater_171", "add_174", "cast_173", "greater_172", "add_175", "cast_174", "greater_173",
                  "add_176", "cast_175", "greater_174", "add_177", "cast_176", "greater_175", "add_178", "cast_177",
                  "greater_176", "add_179", "cast_178", "greater_177", "add_180", "cast_179", "greater_178",
                  "add_181", "cast_180", "greater_179", "add_182", "cast_181", "greater_180", "add_183", "cast_182",
                  "greater_181", "add_184", "cast_183", "greater_182", "add_185", "cast_184", "greater_183",
                  "add_186", "cast_185", "greater_184", "add_187", "cast_186", "greater_185", "add_188", "cast_187",
                  "greater_186", "add_189", "cast_188", "greater_187", "add_190", "cast_189", "greater_188",
                  "add_191", "cast_190", "greater_189", "add_192", "cast_191", "greater_190", "add_193", "cast_192",
                  "greater_191", "add_194", "cast_193", "greater_192", "add_195", "cast_194", "greater_193",
                  "add_196", "cast_195", "greater_194", "add_197", "cast_196", "greater_195", "add_198", "cast_197",
                  "greater_196", "add_199", "cast_198", "greater_197", "add_200", "cast_199", "greater_198",
                  "add_201", "cast_200", "greater_199", "add_202", "cast_201", "greater_200", "add_203", "cast_202",
                  "greater_201", "add_204", "cast_203", "greater_202", "add_205", "cast_204", "greater_203",
                  "add_206", "cast_205", "greater_204", "add_207", "cast_206", "greater_205", "add_208", "cast_207",
                  "greater_206", "add_209", "cast_208", "greater_207", "add_210", "cast_209", "greater_208",
                  "add_211", "cast_210", "greater_209", "add_212", "cast_211", "greater_210", "add_213", "cast_212",
                  "greater_211", "add_214", "cast_213", "greater_212", "add_215", "cast_214", "greater_213",
                  "add_216", "cast_215", "greater_214", "add_217", "cast_216", "greater_215", "add_218", "cast_217",
                  "greater_216", "add_219", "cast_218", "greater_217", "add_220", "cast_219", "greater_218",
                  "add_221", "cast_220", "greater_219", "add_222", "cast_221", "greater_220", "add_223", "cast_222",
                  "greater_221", "add_224", "cast_223", "greater_222", "add_225", "cast_224", "greater_223",
                  "add_226", "cast_225", "greater_224", "add_227", "cast_226", "greater_225", "add_228", "cast_227",
                  "greater_226", "add_229", "cast_228", "greater_227", "add_230", "cast_229", "greater_228",
                  "add_231", "cast_230", "greater_229", "add_232", "cast_231", "greater_230", "add_233", "cast_232",
                  "greater_231", "add_234", "cast_233", "greater_232", "add_235", "cast_234", "greater_233",
                  "add_236", "cast_235", "greater_234", "add_237", "cast_236", "greater_235", "add_238", "cast_237",
                  "greater_236", "add_239", "cast_238", "greater_237", "add_240", "cast_239", "greater_238",
                  "add_241", "cast_240", "greater_239", "add_242", "cast_241", "greater_240", "add_243", "cast_242",
                  "greater_241", "add_244", "cast_243", "greater_242", "add_245", "cast_244", "greater_243",
                  "add_246", "cast_245", "greater_244", "add_247", "cast_246", "greater_245", "add_248", "cast_247",
                  "greater_246", "add_249", "cast_248", "greater_247", "add_250", "cast_249", "greater_248",
                  "add_251", "cast_250", "greater_249", "add_252", "cast_251", "greater_250", "add_253", "cast_252",
                  "greater_251", "add_254", "cast_253", "greater_252", "variable", "cast_254", "greater_253",
                  "greater_254"],
"src_inter_flow": [["add_1:out0", "add:in0"], ["cast:out0", "add:in1"], ["add_2:out0", "add_1:in0"],
                   ["cast_1:out0", "add_1:in1"], ["greater:out0", "cast:in0"], ["add_3:out0", "add_2:in0"],
                   ["cast_2:out0", "add_2:in1"], ["greater_1:out0", "cast_1:in0"], ["split:out254", "greater:in1"],
                   ["add_4:out0", "add_3:in0"], ["cast_3:out0", "add_3:in1"], ["greater_2:out0", "cast_2:in0"],
                   ["split:out253", "greater_1:in1"], ["add_5:out0", "add_4:in0"], ["cast_4:out0", "add_4:in1"],
                   ["greater_3:out0", "cast_3:in0"], ["split:out252", "greater_2:in1"], ["add_6:out0", "add_5:in0"],
                   ["cast_5:out0", "add_5:in1"], ["greater_4:out0", "cast_4:in0"], ["split:out251", "greater_3:in1"],
                   ["add_7:out0", "add_6:in0"], ["cast_6:out0", "add_6:in1"], ["greater_5:out0", "cast_5:in0"],
                   ["split:out250", "greater_4:in1"], ["add_8:out0", "add_7:in0"], ["cast_7:out0", "add_7:in1"],
                   ["greater_6:out0", "cast_6:in0"], ["split:out249", "greater_5:in1"], ["add_9:out0", "add_8:in0"],
                   ["cast_8:out0", "add_8:in1"], ["greater_7:out0", "cast_7:in0"], ["split:out248", "greater_6:in1"],
                   ["add_10:out0", "add_9:in0"], ["cast_9:out0", "add_9:in1"], ["greater_8:out0", "cast_8:in0"],
                   ["split:out247", "greater_7:in1"], ["add_11:out0", "add_10:in0"], ["cast_10:out0", "add_10:in1"],
                   ["greater_9:out0", "cast_9:in0"], ["split:out246", "greater_8:in1"], ["add_12:out0", "add_11:in0"],
                   ["cast_11:out0", "add_11:in1"], ["greater_10:out0", "cast_10:in0"],
                   ["split:out245", "greater_9:in1"], ["add_13:out0", "add_12:in0"], ["cast_12:out0", "add_12:in1"],
                   ["greater_11:out0", "cast_11:in0"], ["split:out244", "greater_10:in1"],
                   ["add_14:out0", "add_13:in0"], ["cast_13:out0", "add_13:in1"], ["greater_12:out0", "cast_12:in0"],
                   ["split:out243", "greater_11:in1"], ["add_15:out0", "add_14:in0"], ["cast_14:out0", "add_14:in1"],
                   ["greater_13:out0", "cast_13:in0"], ["split:out242", "greater_12:in1"],
                   ["add_16:out0", "add_15:in0"], ["cast_15:out0", "add_15:in1"], ["greater_14:out0", "cast_14:in0"],
                   ["split:out241", "greater_13:in1"], ["add_17:out0", "add_16:in0"], ["cast_16:out0", "add_16:in1"],
                   ["greater_15:out0", "cast_15:in0"], ["split:out240", "greater_14:in1"],
                   ["add_18:out0", "add_17:in0"], ["cast_17:out0", "add_17:in1"], ["greater_16:out0", "cast_16:in0"],
                   ["split:out239", "greater_15:in1"], ["add_19:out0", "add_18:in0"], ["cast_18:out0", "add_18:in1"],
                   ["greater_17:out0", "cast_17:in0"], ["split:out238", "greater_16:in1"],
                   ["add_20:out0", "add_19:in0"], ["cast_19:out0", "add_19:in1"], ["greater_18:out0", "cast_18:in0"],
                   ["split:out237", "greater_17:in1"], ["add_21:out0", "add_20:in0"], ["cast_20:out0", "add_20:in1"],
                   ["greater_19:out0", "cast_19:in0"], ["split:out236", "greater_18:in1"],
                   ["add_22:out0", "add_21:in0"], ["cast_21:out0", "add_21:in1"], ["greater_20:out0", "cast_20:in0"],
                   ["split:out235", "greater_19:in1"], ["add_23:out0", "add_22:in0"], ["cast_22:out0", "add_22:in1"],
                   ["greater_21:out0", "cast_21:in0"], ["split:out234", "greater_20:in1"],
                   ["add_24:out0", "add_23:in0"], ["cast_23:out0", "add_23:in1"], ["greater_22:out0", "cast_22:in0"],
                   ["split:out233", "greater_21:in1"], ["add_25:out0", "add_24:in0"], ["cast_24:out0", "add_24:in1"],
                   ["greater_23:out0", "cast_23:in0"], ["split:out232", "greater_22:in1"],
                   ["add_26:out0", "add_25:in0"], ["cast_25:out0", "add_25:in1"], ["greater_24:out0", "cast_24:in0"],
                   ["split:out231", "greater_23:in1"], ["add_27:out0", "add_26:in0"], ["cast_26:out0", "add_26:in1"],
                   ["greater_25:out0", "cast_25:in0"], ["split:out230", "greater_24:in1"],
                   ["add_28:out0", "add_27:in0"], ["cast_27:out0", "add_27:in1"], ["greater_26:out0", "cast_26:in0"],
                   ["split:out229", "greater_25:in1"], ["add_29:out0", "add_28:in0"], ["cast_28:out0", "add_28:in1"],
                   ["greater_27:out0", "cast_27:in0"], ["split:out228", "greater_26:in1"],
                   ["add_30:out0", "add_29:in0"], ["cast_29:out0", "add_29:in1"], ["greater_28:out0", "cast_28:in0"],
                   ["split:out227", "greater_27:in1"], ["add_31:out0", "add_30:in0"], ["cast_30:out0", "add_30:in1"],
                   ["greater_29:out0", "cast_29:in0"], ["split:out226", "greater_28:in1"],
                   ["add_32:out0", "add_31:in0"], ["cast_31:out0", "add_31:in1"], ["greater_30:out0", "cast_30:in0"],
                   ["split:out225", "greater_29:in1"], ["add_33:out0", "add_32:in0"], ["cast_32:out0", "add_32:in1"],
                   ["greater_31:out0", "cast_31:in0"], ["split:out224", "greater_30:in1"],
                   ["add_34:out0", "add_33:in0"], ["cast_33:out0", "add_33:in1"], ["greater_32:out0", "cast_32:in0"],
                   ["split:out223", "greater_31:in1"], ["add_35:out0", "add_34:in0"], ["cast_34:out0", "add_34:in1"],
                   ["greater_33:out0", "cast_33:in0"], ["split:out222", "greater_32:in1"],
                   ["add_36:out0", "add_35:in0"], ["cast_35:out0", "add_35:in1"], ["greater_34:out0", "cast_34:in0"],
                   ["split:out221", "greater_33:in1"], ["add_37:out0", "add_36:in0"], ["cast_36:out0", "add_36:in1"],
                   ["greater_35:out0", "cast_35:in0"], ["split:out220", "greater_34:in1"],
                   ["add_38:out0", "add_37:in0"], ["cast_37:out0", "add_37:in1"], ["greater_36:out0", "cast_36:in0"],
                   ["split:out219", "greater_35:in1"], ["add_39:out0", "add_38:in0"], ["cast_38:out0", "add_38:in1"],
                   ["greater_37:out0", "cast_37:in0"], ["split:out218", "greater_36:in1"],
                   ["add_40:out0", "add_39:in0"], ["cast_39:out0", "add_39:in1"], ["greater_38:out0", "cast_38:in0"],
                   ["split:out217", "greater_37:in1"], ["add_41:out0", "add_40:in0"], ["cast_40:out0", "add_40:in1"],
                   ["greater_39:out0", "cast_39:in0"], ["split:out216", "greater_38:in1"],
                   ["add_42:out0", "add_41:in0"], ["cast_41:out0", "add_41:in1"], ["greater_40:out0", "cast_40:in0"],
                   ["split:out215", "greater_39:in1"], ["add_43:out0", "add_42:in0"], ["cast_42:out0", "add_42:in1"],
                   ["greater_41:out0", "cast_41:in0"], ["split:out214", "greater_40:in1"],
                   ["add_44:out0", "add_43:in0"], ["cast_43:out0", "add_43:in1"], ["greater_42:out0", "cast_42:in0"],
                   ["split:out213", "greater_41:in1"], ["add_45:out0", "add_44:in0"], ["cast_44:out0", "add_44:in1"],
                   ["greater_43:out0", "cast_43:in0"], ["split:out212", "greater_42:in1"],
                   ["add_46:out0", "add_45:in0"], ["cast_45:out0", "add_45:in1"], ["greater_44:out0", "cast_44:in0"],
                   ["split:out211", "greater_43:in1"], ["add_47:out0", "add_46:in0"], ["cast_46:out0", "add_46:in1"],
                   ["greater_45:out0", "cast_45:in0"], ["split:out210", "greater_44:in1"],
                   ["add_48:out0", "add_47:in0"], ["cast_47:out0", "add_47:in1"], ["greater_46:out0", "cast_46:in0"],
                   ["split:out209", "greater_45:in1"], ["add_49:out0", "add_48:in0"], ["cast_48:out0", "add_48:in1"],
                   ["greater_47:out0", "cast_47:in0"], ["split:out208", "greater_46:in1"],
                   ["add_50:out0", "add_49:in0"], ["cast_49:out0", "add_49:in1"], ["greater_48:out0", "cast_48:in0"],
                   ["split:out207", "greater_47:in1"], ["add_51:out0", "add_50:in0"], ["cast_50:out0", "add_50:in1"],
                   ["greater_49:out0", "cast_49:in0"], ["split:out206", "greater_48:in1"],
                   ["add_52:out0", "add_51:in0"], ["cast_51:out0", "add_51:in1"], ["greater_50:out0", "cast_50:in0"],
                   ["split:out205", "greater_49:in1"], ["add_53:out0", "add_52:in0"], ["cast_52:out0", "add_52:in1"],
                   ["greater_51:out0", "cast_51:in0"], ["split:out204", "greater_50:in1"],
                   ["add_54:out0", "add_53:in0"], ["cast_53:out0", "add_53:in1"], ["greater_52:out0", "cast_52:in0"],
                   ["split:out203", "greater_51:in1"], ["add_55:out0", "add_54:in0"], ["cast_54:out0", "add_54:in1"],
                   ["greater_53:out0", "cast_53:in0"], ["split:out202", "greater_52:in1"],
                   ["add_56:out0", "add_55:in0"], ["cast_55:out0", "add_55:in1"], ["greater_54:out0", "cast_54:in0"],
                   ["split:out201", "greater_53:in1"], ["add_57:out0", "add_56:in0"], ["cast_56:out0", "add_56:in1"],
                   ["greater_55:out0", "cast_55:in0"], ["split:out200", "greater_54:in1"],
                   ["add_58:out0", "add_57:in0"], ["cast_57:out0", "add_57:in1"], ["greater_56:out0", "cast_56:in0"],
                   ["split:out199", "greater_55:in1"], ["add_59:out0", "add_58:in0"], ["cast_58:out0", "add_58:in1"],
                   ["greater_57:out0", "cast_57:in0"], ["split:out198", "greater_56:in1"],
                   ["add_60:out0", "add_59:in0"], ["cast_59:out0", "add_59:in1"], ["greater_58:out0", "cast_58:in0"],
                   ["split:out197", "greater_57:in1"], ["add_61:out0", "add_60:in0"], ["cast_60:out0", "add_60:in1"],
                   ["greater_59:out0", "cast_59:in0"], ["split:out196", "greater_58:in1"],
                   ["add_62:out0", "add_61:in0"], ["cast_61:out0", "add_61:in1"], ["greater_60:out0", "cast_60:in0"],
                   ["split:out195", "greater_59:in1"], ["add_63:out0", "add_62:in0"], ["cast_62:out0", "add_62:in1"],
                   ["greater_61:out0", "cast_61:in0"], ["split:out194", "greater_60:in1"],
                   ["add_64:out0", "add_63:in0"], ["cast_63:out0", "add_63:in1"], ["greater_62:out0", "cast_62:in0"],
                   ["split:out193", "greater_61:in1"], ["add_65:out0", "add_64:in0"], ["cast_64:out0", "add_64:in1"],
                   ["greater_63:out0", "cast_63:in0"], ["split:out192", "greater_62:in1"],
                   ["add_66:out0", "add_65:in0"], ["cast_65:out0", "add_65:in1"], ["greater_64:out0", "cast_64:in0"],
                   ["split:out191", "greater_63:in1"], ["add_67:out0", "add_66:in0"], ["cast_66:out0", "add_66:in1"],
                   ["greater_65:out0", "cast_65:in0"], ["split:out190", "greater_64:in1"],
                   ["add_68:out0", "add_67:in0"], ["cast_67:out0", "add_67:in1"], ["greater_66:out0", "cast_66:in0"],
                   ["split:out189", "greater_65:in1"], ["add_69:out0", "add_68:in0"], ["cast_68:out0", "add_68:in1"],
                   ["greater_67:out0", "cast_67:in0"], ["split:out188", "greater_66:in1"],
                   ["add_70:out0", "add_69:in0"], ["cast_69:out0", "add_69:in1"], ["greater_68:out0", "cast_68:in0"],
                   ["split:out187", "greater_67:in1"], ["add_71:out0", "add_70:in0"], ["cast_70:out0", "add_70:in1"],
                   ["greater_69:out0", "cast_69:in0"], ["split:out186", "greater_68:in1"],
                   ["add_72:out0", "add_71:in0"], ["cast_71:out0", "add_71:in1"], ["greater_70:out0", "cast_70:in0"],
                   ["split:out185", "greater_69:in1"], ["add_73:out0", "add_72:in0"], ["cast_72:out0", "add_72:in1"],
                   ["greater_71:out0", "cast_71:in0"], ["split:out184", "greater_70:in1"],
                   ["add_74:out0", "add_73:in0"], ["cast_73:out0", "add_73:in1"], ["greater_72:out0", "cast_72:in0"],
                   ["split:out183", "greater_71:in1"], ["add_75:out0", "add_74:in0"], ["cast_74:out0", "add_74:in1"],
                   ["greater_73:out0", "cast_73:in0"], ["split:out182", "greater_72:in1"],
                   ["add_76:out0", "add_75:in0"], ["cast_75:out0", "add_75:in1"], ["greater_74:out0", "cast_74:in0"],
                   ["split:out181", "greater_73:in1"], ["add_77:out0", "add_76:in0"], ["cast_76:out0", "add_76:in1"],
                   ["greater_75:out0", "cast_75:in0"], ["split:out180", "greater_74:in1"],
                   ["add_78:out0", "add_77:in0"], ["cast_77:out0", "add_77:in1"], ["greater_76:out0", "cast_76:in0"],
                   ["split:out179", "greater_75:in1"], ["add_79:out0", "add_78:in0"], ["cast_78:out0", "add_78:in1"],
                   ["greater_77:out0", "cast_77:in0"], ["split:out178", "greater_76:in1"],
                   ["add_80:out0", "add_79:in0"], ["cast_79:out0", "add_79:in1"], ["greater_78:out0", "cast_78:in0"],
                   ["split:out177", "greater_77:in1"], ["add_81:out0", "add_80:in0"], ["cast_80:out0", "add_80:in1"],
                   ["greater_79:out0", "cast_79:in0"], ["split:out176", "greater_78:in1"],
                   ["add_82:out0", "add_81:in0"], ["cast_81:out0", "add_81:in1"], ["greater_80:out0", "cast_80:in0"],
                   ["split:out175", "greater_79:in1"], ["add_83:out0", "add_82:in0"], ["cast_82:out0", "add_82:in1"],
                   ["greater_81:out0", "cast_81:in0"], ["split:out174", "greater_80:in1"],
                   ["add_84:out0", "add_83:in0"], ["cast_83:out0", "add_83:in1"], ["greater_82:out0", "cast_82:in0"],
                   ["split:out173", "greater_81:in1"], ["add_85:out0", "add_84:in0"], ["cast_84:out0", "add_84:in1"],
                   ["greater_83:out0", "cast_83:in0"], ["split:out172", "greater_82:in1"],
                   ["add_86:out0", "add_85:in0"], ["cast_85:out0", "add_85:in1"], ["greater_84:out0", "cast_84:in0"],
                   ["split:out171", "greater_83:in1"], ["add_87:out0", "add_86:in0"], ["cast_86:out0", "add_86:in1"],
                   ["greater_85:out0", "cast_85:in0"], ["split:out170", "greater_84:in1"],
                   ["add_88:out0", "add_87:in0"], ["cast_87:out0", "add_87:in1"], ["greater_86:out0", "cast_86:in0"],
                   ["split:out169", "greater_85:in1"], ["add_89:out0", "add_88:in0"], ["cast_88:out0", "add_88:in1"],
                   ["greater_87:out0", "cast_87:in0"], ["split:out168", "greater_86:in1"],
                   ["add_90:out0", "add_89:in0"], ["cast_89:out0", "add_89:in1"], ["greater_88:out0", "cast_88:in0"],
                   ["split:out167", "greater_87:in1"], ["add_91:out0", "add_90:in0"], ["cast_90:out0", "add_90:in1"],
                   ["greater_89:out0", "cast_89:in0"], ["split:out166", "greater_88:in1"],
                   ["add_92:out0", "add_91:in0"], ["cast_91:out0", "add_91:in1"], ["greater_90:out0", "cast_90:in0"],
                   ["split:out165", "greater_89:in1"], ["add_93:out0", "add_92:in0"], ["cast_92:out0", "add_92:in1"],
                   ["greater_91:out0", "cast_91:in0"], ["split:out164", "greater_90:in1"],
                   ["add_94:out0", "add_93:in0"], ["cast_93:out0", "add_93:in1"], ["greater_92:out0", "cast_92:in0"],
                   ["split:out163", "greater_91:in1"], ["add_95:out0", "add_94:in0"], ["cast_94:out0", "add_94:in1"],
                   ["greater_93:out0", "cast_93:in0"], ["split:out162", "greater_92:in1"],
                   ["add_96:out0", "add_95:in0"], ["cast_95:out0", "add_95:in1"], ["greater_94:out0", "cast_94:in0"],
                   ["split:out161", "greater_93:in1"], ["add_97:out0", "add_96:in0"], ["cast_96:out0", "add_96:in1"],
                   ["greater_95:out0", "cast_95:in0"], ["split:out160", "greater_94:in1"],
                   ["add_98:out0", "add_97:in0"], ["cast_97:out0", "add_97:in1"], ["greater_96:out0", "cast_96:in0"],
                   ["split:out159", "greater_95:in1"], ["add_99:out0", "add_98:in0"], ["cast_98:out0", "add_98:in1"],
                   ["greater_97:out0", "cast_97:in0"], ["split:out158", "greater_96:in1"],
                   ["add_100:out0", "add_99:in0"], ["cast_99:out0", "add_99:in1"], ["greater_98:out0", "cast_98:in0"],
                   ["split:out157", "greater_97:in1"], ["add_101:out0", "add_100:in0"],
                   ["cast_100:out0", "add_100:in1"], ["greater_99:out0", "cast_99:in0"],
                   ["split:out156", "greater_98:in1"], ["add_102:out0", "add_101:in0"],
                   ["cast_101:out0", "add_101:in1"], ["greater_100:out0", "cast_100:in0"],
                   ["split:out155", "greater_99:in1"], ["add_103:out0", "add_102:in0"],
                   ["cast_102:out0", "add_102:in1"], ["greater_101:out0", "cast_101:in0"],
                   ["split:out154", "greater_100:in1"], ["add_104:out0", "add_103:in0"],
                   ["cast_103:out0", "add_103:in1"], ["greater_102:out0", "cast_102:in0"],
                   ["split:out153", "greater_101:in1"], ["add_105:out0", "add_104:in0"],
                   ["cast_104:out0", "add_104:in1"], ["greater_103:out0", "cast_103:in0"],
                   ["split:out152", "greater_102:in1"], ["add_106:out0", "add_105:in0"],
                   ["cast_105:out0", "add_105:in1"], ["greater_104:out0", "cast_104:in0"],
                   ["split:out151", "greater_103:in1"], ["add_107:out0", "add_106:in0"],
                   ["cast_106:out0", "add_106:in1"], ["greater_105:out0", "cast_105:in0"],
                   ["split:out150", "greater_104:in1"], ["add_108:out0", "add_107:in0"],
                   ["cast_107:out0", "add_107:in1"], ["greater_106:out0", "cast_106:in0"],
                   ["split:out149", "greater_105:in1"], ["add_109:out0", "add_108:in0"],
                   ["cast_108:out0", "add_108:in1"], ["greater_107:out0", "cast_107:in0"],
                   ["split:out148", "greater_106:in1"], ["add_110:out0", "add_109:in0"],
                   ["cast_109:out0", "add_109:in1"], ["greater_108:out0", "cast_108:in0"],
                   ["split:out147", "greater_107:in1"], ["add_111:out0", "add_110:in0"],
                   ["cast_110:out0", "add_110:in1"], ["greater_109:out0", "cast_109:in0"],
                   ["split:out146", "greater_108:in1"], ["add_112:out0", "add_111:in0"],
                   ["cast_111:out0", "add_111:in1"], ["greater_110:out0", "cast_110:in0"],
                   ["split:out145", "greater_109:in1"], ["add_113:out0", "add_112:in0"],
                   ["cast_112:out0", "add_112:in1"], ["greater_111:out0", "cast_111:in0"],
                   ["split:out144", "greater_110:in1"], ["add_114:out0", "add_113:in0"],
                   ["cast_113:out0", "add_113:in1"], ["greater_112:out0", "cast_112:in0"],
                   ["split:out143", "greater_111:in1"], ["add_115:out0", "add_114:in0"],
                   ["cast_114:out0", "add_114:in1"], ["greater_113:out0", "cast_113:in0"],
                   ["split:out142", "greater_112:in1"], ["add_116:out0", "add_115:in0"],
                   ["cast_115:out0", "add_115:in1"], ["greater_114:out0", "cast_114:in0"],
                   ["split:out141", "greater_113:in1"], ["add_117:out0", "add_116:in0"],
                   ["cast_116:out0", "add_116:in1"], ["greater_115:out0", "cast_115:in0"],
                   ["split:out140", "greater_114:in1"], ["add_118:out0", "add_117:in0"],
                   ["cast_117:out0", "add_117:in1"], ["greater_116:out0", "cast_116:in0"],
                   ["split:out139", "greater_115:in1"], ["add_119:out0", "add_118:in0"],
                   ["cast_118:out0", "add_118:in1"], ["greater_117:out0", "cast_117:in0"],
                   ["split:out138", "greater_116:in1"], ["add_120:out0", "add_119:in0"],
                   ["cast_119:out0", "add_119:in1"], ["greater_118:out0", "cast_118:in0"],
                   ["split:out137", "greater_117:in1"], ["add_121:out0", "add_120:in0"],
                   ["cast_120:out0", "add_120:in1"], ["greater_119:out0", "cast_119:in0"],
                   ["split:out136", "greater_118:in1"], ["add_122:out0", "add_121:in0"],
                   ["cast_121:out0", "add_121:in1"], ["greater_120:out0", "cast_120:in0"],
                   ["split:out135", "greater_119:in1"], ["add_123:out0", "add_122:in0"],
                   ["cast_122:out0", "add_122:in1"], ["greater_121:out0", "cast_121:in0"],
                   ["split:out134", "greater_120:in1"], ["add_124:out0", "add_123:in0"],
                   ["cast_123:out0", "add_123:in1"], ["greater_122:out0", "cast_122:in0"],
                   ["split:out133", "greater_121:in1"], ["add_125:out0", "add_124:in0"],
                   ["cast_124:out0", "add_124:in1"], ["greater_123:out0", "cast_123:in0"],
                   ["split:out132", "greater_122:in1"], ["add_126:out0", "add_125:in0"],
                   ["cast_125:out0", "add_125:in1"], ["greater_124:out0", "cast_124:in0"],
                   ["split:out131", "greater_123:in1"], ["add_127:out0", "add_126:in0"],
                   ["cast_126:out0", "add_126:in1"], ["greater_125:out0", "cast_125:in0"],
                   ["split:out130", "greater_124:in1"], ["add_128:out0", "add_127:in0"],
                   ["cast_127:out0", "add_127:in1"], ["greater_126:out0", "cast_126:in0"],
                   ["split:out129", "greater_125:in1"], ["add_129:out0", "add_128:in0"],
                   ["cast_128:out0", "add_128:in1"], ["greater_127:out0", "cast_127:in0"],
                   ["split:out128", "greater_126:in1"], ["add_130:out0", "add_129:in0"],
                   ["cast_129:out0", "add_129:in1"], ["greater_128:out0", "cast_128:in0"],
                   ["split:out127", "greater_127:in1"], ["add_131:out0", "add_130:in0"],
                   ["cast_130:out0", "add_130:in1"], ["greater_129:out0", "cast_129:in0"],
                   ["split:out126", "greater_128:in1"], ["add_132:out0", "add_131:in0"],
                   ["cast_131:out0", "add_131:in1"], ["greater_130:out0", "cast_130:in0"],
                   ["split:out125", "greater_129:in1"], ["add_133:out0", "add_132:in0"],
                   ["cast_132:out0", "add_132:in1"], ["greater_131:out0", "cast_131:in0"],
                   ["split:out124", "greater_130:in1"], ["add_134:out0", "add_133:in0"],
                   ["cast_133:out0", "add_133:in1"], ["greater_132:out0", "cast_132:in0"],
                   ["split:out123", "greater_131:in1"], ["add_135:out0", "add_134:in0"],
                   ["cast_134:out0", "add_134:in1"], ["greater_133:out0", "cast_133:in0"],
                   ["split:out122", "greater_132:in1"], ["add_136:out0", "add_135:in0"],
                   ["cast_135:out0", "add_135:in1"], ["greater_134:out0", "cast_134:in0"],
                   ["split:out121", "greater_133:in1"], ["add_137:out0", "add_136:in0"],
                   ["cast_136:out0", "add_136:in1"], ["greater_135:out0", "cast_135:in0"],
                   ["split:out120", "greater_134:in1"], ["add_138:out0", "add_137:in0"],
                   ["cast_137:out0", "add_137:in1"], ["greater_136:out0", "cast_136:in0"],
                   ["split:out119", "greater_135:in1"], ["add_139:out0", "add_138:in0"],
                   ["cast_138:out0", "add_138:in1"], ["greater_137:out0", "cast_137:in0"],
                   ["split:out118", "greater_136:in1"], ["add_140:out0", "add_139:in0"],
                   ["cast_139:out0", "add_139:in1"], ["greater_138:out0", "cast_138:in0"],
                   ["split:out117", "greater_137:in1"], ["add_141:out0", "add_140:in0"],
                   ["cast_140:out0", "add_140:in1"], ["greater_139:out0", "cast_139:in0"],
                   ["split:out116", "greater_138:in1"], ["add_142:out0", "add_141:in0"],
                   ["cast_141:out0", "add_141:in1"], ["greater_140:out0", "cast_140:in0"],
                   ["split:out115", "greater_139:in1"], ["add_143:out0", "add_142:in0"],
                   ["cast_142:out0", "add_142:in1"], ["greater_141:out0", "cast_141:in0"],
                   ["split:out114", "greater_140:in1"], ["add_144:out0", "add_143:in0"],
                   ["cast_143:out0", "add_143:in1"], ["greater_142:out0", "cast_142:in0"],
                   ["split:out113", "greater_141:in1"], ["add_145:out0", "add_144:in0"],
                   ["cast_144:out0", "add_144:in1"], ["greater_143:out0", "cast_143:in0"],
                   ["split:out112", "greater_142:in1"], ["add_146:out0", "add_145:in0"],
                   ["cast_145:out0", "add_145:in1"], ["greater_144:out0", "cast_144:in0"],
                   ["split:out111", "greater_143:in1"], ["add_147:out0", "add_146:in0"],
                   ["cast_146:out0", "add_146:in1"], ["greater_145:out0", "cast_145:in0"],
                   ["split:out110", "greater_144:in1"], ["add_148:out0", "add_147:in0"],
                   ["cast_147:out0", "add_147:in1"], ["greater_146:out0", "cast_146:in0"],
                   ["split:out109", "greater_145:in1"], ["add_149:out0", "add_148:in0"],
                   ["cast_148:out0", "add_148:in1"], ["greater_147:out0", "cast_147:in0"],
                   ["split:out108", "greater_146:in1"], ["add_150:out0", "add_149:in0"],
                   ["cast_149:out0", "add_149:in1"], ["greater_148:out0", "cast_148:in0"],
                   ["split:out107", "greater_147:in1"], ["add_151:out0", "add_150:in0"],
                   ["cast_150:out0", "add_150:in1"], ["greater_149:out0", "cast_149:in0"],
                   ["split:out106", "greater_148:in1"], ["add_152:out0", "add_151:in0"],
                   ["cast_151:out0", "add_151:in1"], ["greater_150:out0", "cast_150:in0"],
                   ["split:out105", "greater_149:in1"], ["add_153:out0", "add_152:in0"],
                   ["cast_152:out0", "add_152:in1"], ["greater_151:out0", "cast_151:in0"],
                   ["split:out104", "greater_150:in1"], ["add_154:out0", "add_153:in0"],
                   ["cast_153:out0", "add_153:in1"], ["greater_152:out0", "cast_152:in0"],
                   ["split:out103", "greater_151:in1"], ["add_155:out0", "add_154:in0"],
                   ["cast_154:out0", "add_154:in1"], ["greater_153:out0", "cast_153:in0"],
                   ["split:out102", "greater_152:in1"], ["add_156:out0", "add_155:in0"],
                   ["cast_155:out0", "add_155:in1"], ["greater_154:out0", "cast_154:in0"],
                   ["split:out101", "greater_153:in1"], ["add_157:out0", "add_156:in0"],
                   ["cast_156:out0", "add_156:in1"], ["greater_155:out0", "cast_155:in0"],
                   ["split:out100", "greater_154:in1"], ["add_158:out0", "add_157:in0"],
                   ["cast_157:out0", "add_157:in1"], ["greater_156:out0", "cast_156:in0"],
                   ["split:out99", "greater_155:in1"], ["add_159:out0", "add_158:in0"],
                   ["cast_158:out0", "add_158:in1"], ["greater_157:out0", "cast_157:in0"],
                   ["split:out98", "greater_156:in1"], ["add_160:out0", "add_159:in0"],
                   ["cast_159:out0", "add_159:in1"], ["greater_158:out0", "cast_158:in0"],
                   ["split:out97", "greater_157:in1"], ["add_161:out0", "add_160:in0"],
                   ["cast_160:out0", "add_160:in1"], ["greater_159:out0", "cast_159:in0"],
                   ["split:out96", "greater_158:in1"], ["add_162:out0", "add_161:in0"],
                   ["cast_161:out0", "add_161:in1"], ["greater_160:out0", "cast_160:in0"],
                   ["split:out95", "greater_159:in1"], ["add_163:out0", "add_162:in0"],
                   ["cast_162:out0", "add_162:in1"], ["greater_161:out0", "cast_161:in0"],
                   ["split:out94", "greater_160:in1"], ["add_164:out0", "add_163:in0"],
                   ["cast_163:out0", "add_163:in1"], ["greater_162:out0", "cast_162:in0"],
                   ["split:out93", "greater_161:in1"], ["add_165:out0", "add_164:in0"],
                   ["cast_164:out0", "add_164:in1"], ["greater_163:out0", "cast_163:in0"],
                   ["split:out92", "greater_162:in1"], ["add_166:out0", "add_165:in0"],
                   ["cast_165:out0", "add_165:in1"], ["greater_164:out0", "cast_164:in0"],
                   ["split:out91", "greater_163:in1"], ["add_167:out0", "add_166:in0"],
                   ["cast_166:out0", "add_166:in1"], ["greater_165:out0", "cast_165:in0"],
                   ["split:out90", "greater_164:in1"], ["add_168:out0", "add_167:in0"],
                   ["cast_167:out0", "add_167:in1"], ["greater_166:out0", "cast_166:in0"],
                   ["split:out89", "greater_165:in1"], ["add_169:out0", "add_168:in0"],
                   ["cast_168:out0", "add_168:in1"], ["greater_167:out0", "cast_167:in0"],
                   ["split:out88", "greater_166:in1"], ["add_170:out0", "add_169:in0"],
                   ["cast_169:out0", "add_169:in1"], ["greater_168:out0", "cast_168:in0"],
                   ["split:out87", "greater_167:in1"], ["add_171:out0", "add_170:in0"],
                   ["cast_170:out0", "add_170:in1"], ["greater_169:out0", "cast_169:in0"],
                   ["split:out86", "greater_168:in1"], ["add_172:out0", "add_171:in0"],
                   ["cast_171:out0", "add_171:in1"], ["greater_170:out0", "cast_170:in0"],
                   ["split:out85", "greater_169:in1"], ["add_173:out0", "add_172:in0"],
                   ["cast_172:out0", "add_172:in1"], ["greater_171:out0", "cast_171:in0"],
                   ["split:out84", "greater_170:in1"], ["add_174:out0", "add_173:in0"],
                   ["cast_173:out0", "add_173:in1"], ["greater_172:out0", "cast_172:in0"],
                   ["split:out83", "greater_171:in1"], ["add_175:out0", "add_174:in0"],
                   ["cast_174:out0", "add_174:in1"], ["greater_173:out0", "cast_173:in0"],
                   ["split:out82", "greater_172:in1"], ["add_176:out0", "add_175:in0"],
                   ["cast_175:out0", "add_175:in1"], ["greater_174:out0", "cast_174:in0"],
                   ["split:out81", "greater_173:in1"], ["add_177:out0", "add_176:in0"],
                   ["cast_176:out0", "add_176:in1"], ["greater_175:out0", "cast_175:in0"],
                   ["split:out80", "greater_174:in1"], ["add_178:out0", "add_177:in0"],
                   ["cast_177:out0", "add_177:in1"], ["greater_176:out0", "cast_176:in0"],
                   ["split:out79", "greater_175:in1"], ["add_179:out0", "add_178:in0"],
                   ["cast_178:out0", "add_178:in1"], ["greater_177:out0", "cast_177:in0"],
                   ["split:out78", "greater_176:in1"], ["add_180:out0", "add_179:in0"],
                   ["cast_179:out0", "add_179:in1"], ["greater_178:out0", "cast_178:in0"],
                   ["split:out77", "greater_177:in1"], ["add_181:out0", "add_180:in0"],
                   ["cast_180:out0", "add_180:in1"], ["greater_179:out0", "cast_179:in0"],
                   ["split:out76", "greater_178:in1"], ["add_182:out0", "add_181:in0"],
                   ["cast_181:out0", "add_181:in1"], ["greater_180:out0", "cast_180:in0"],
                   ["split:out75", "greater_179:in1"], ["add_183:out0", "add_182:in0"],
                   ["cast_182:out0", "add_182:in1"], ["greater_181:out0", "cast_181:in0"],
                   ["split:out74", "greater_180:in1"], ["add_184:out0", "add_183:in0"],
                   ["cast_183:out0", "add_183:in1"], ["greater_182:out0", "cast_182:in0"],
                   ["split:out73", "greater_181:in1"], ["add_185:out0", "add_184:in0"],
                   ["cast_184:out0", "add_184:in1"], ["greater_183:out0", "cast_183:in0"],
                   ["split:out72", "greater_182:in1"], ["add_186:out0", "add_185:in0"],
                   ["cast_185:out0", "add_185:in1"], ["greater_184:out0", "cast_184:in0"],
                   ["split:out71", "greater_183:in1"], ["add_187:out0", "add_186:in0"],
                   ["cast_186:out0", "add_186:in1"], ["greater_185:out0", "cast_185:in0"],
                   ["split:out70", "greater_184:in1"], ["add_188:out0", "add_187:in0"],
                   ["cast_187:out0", "add_187:in1"], ["greater_186:out0", "cast_186:in0"],
                   ["split:out69", "greater_185:in1"], ["add_189:out0", "add_188:in0"],
                   ["cast_188:out0", "add_188:in1"], ["greater_187:out0", "cast_187:in0"],
                   ["split:out68", "greater_186:in1"], ["add_190:out0", "add_189:in0"],
                   ["cast_189:out0", "add_189:in1"], ["greater_188:out0", "cast_188:in0"],
                   ["split:out67", "greater_187:in1"], ["add_191:out0", "add_190:in0"],
                   ["cast_190:out0", "add_190:in1"], ["greater_189:out0", "cast_189:in0"],
                   ["split:out66", "greater_188:in1"], ["add_192:out0", "add_191:in0"],
                   ["cast_191:out0", "add_191:in1"], ["greater_190:out0", "cast_190:in0"],
                   ["split:out65", "greater_189:in1"], ["add_193:out0", "add_192:in0"],
                   ["cast_192:out0", "add_192:in1"], ["greater_191:out0", "cast_191:in0"],
                   ["split:out64", "greater_190:in1"], ["add_194:out0", "add_193:in0"],
                   ["cast_193:out0", "add_193:in1"], ["greater_192:out0", "cast_192:in0"],
                   ["split:out63", "greater_191:in1"], ["add_195:out0", "add_194:in0"],
                   ["cast_194:out0", "add_194:in1"], ["greater_193:out0", "cast_193:in0"],
                   ["split:out62", "greater_192:in1"], ["add_196:out0", "add_195:in0"],
                   ["cast_195:out0", "add_195:in1"], ["greater_194:out0", "cast_194:in0"],
                   ["split:out61", "greater_193:in1"], ["add_197:out0", "add_196:in0"],
                   ["cast_196:out0", "add_196:in1"], ["greater_195:out0", "cast_195:in0"],
                   ["split:out60", "greater_194:in1"], ["add_198:out0", "add_197:in0"],
                   ["cast_197:out0", "add_197:in1"], ["greater_196:out0", "cast_196:in0"],
                   ["split:out59", "greater_195:in1"], ["add_199:out0", "add_198:in0"],
                   ["cast_198:out0", "add_198:in1"], ["greater_197:out0", "cast_197:in0"],
                   ["split:out58", "greater_196:in1"], ["add_200:out0", "add_199:in0"],
                   ["cast_199:out0", "add_199:in1"], ["greater_198:out0", "cast_198:in0"],
                   ["split:out57", "greater_197:in1"], ["add_201:out0", "add_200:in0"],
                   ["cast_200:out0", "add_200:in1"], ["greater_199:out0", "cast_199:in0"],
                   ["split:out56", "greater_198:in1"], ["add_202:out0", "add_201:in0"],
                   ["cast_201:out0", "add_201:in1"], ["greater_200:out0", "cast_200:in0"],
                   ["split:out55", "greater_199:in1"], ["add_203:out0", "add_202:in0"],
                   ["cast_202:out0", "add_202:in1"], ["greater_201:out0", "cast_201:in0"],
                   ["split:out54", "greater_200:in1"], ["add_204:out0", "add_203:in0"],
                   ["cast_203:out0", "add_203:in1"], ["greater_202:out0", "cast_202:in0"],
                   ["split:out53", "greater_201:in1"], ["add_205:out0", "add_204:in0"],
                   ["cast_204:out0", "add_204:in1"], ["greater_203:out0", "cast_203:in0"],
                   ["split:out52", "greater_202:in1"], ["add_206:out0", "add_205:in0"],
                   ["cast_205:out0", "add_205:in1"], ["greater_204:out0", "cast_204:in0"],
                   ["split:out51", "greater_203:in1"], ["add_207:out0", "add_206:in0"],
                   ["cast_206:out0", "add_206:in1"], ["greater_205:out0", "cast_205:in0"],
                   ["split:out50", "greater_204:in1"], ["add_208:out0", "add_207:in0"],
                   ["cast_207:out0", "add_207:in1"], ["greater_206:out0", "cast_206:in0"],
                   ["split:out49", "greater_205:in1"], ["add_209:out0", "add_208:in0"],
                   ["cast_208:out0", "add_208:in1"], ["greater_207:out0", "cast_207:in0"],
                   ["split:out48", "greater_206:in1"], ["add_210:out0", "add_209:in0"],
                   ["cast_209:out0", "add_209:in1"], ["greater_208:out0", "cast_208:in0"],
                   ["split:out47", "greater_207:in1"], ["add_211:out0", "add_210:in0"],
                   ["cast_210:out0", "add_210:in1"], ["greater_209:out0", "cast_209:in0"],
                   ["split:out46", "greater_208:in1"], ["add_212:out0", "add_211:in0"],
                   ["cast_211:out0", "add_211:in1"], ["greater_210:out0", "cast_210:in0"],
                   ["split:out45", "greater_209:in1"], ["add_213:out0", "add_212:in0"],
                   ["cast_212:out0", "add_212:in1"], ["greater_211:out0", "cast_211:in0"],
                   ["split:out44", "greater_210:in1"], ["add_214:out0", "add_213:in0"],
                   ["cast_213:out0", "add_213:in1"], ["greater_212:out0", "cast_212:in0"],
                   ["split:out43", "greater_211:in1"], ["add_215:out0", "add_214:in0"],
                   ["cast_214:out0", "add_214:in1"], ["greater_213:out0", "cast_213:in0"],
                   ["split:out42", "greater_212:in1"], ["add_216:out0", "add_215:in0"],
                   ["cast_215:out0", "add_215:in1"], ["greater_214:out0", "cast_214:in0"],
                   ["split:out41", "greater_213:in1"], ["add_217:out0", "add_216:in0"],
                   ["cast_216:out0", "add_216:in1"], ["greater_215:out0", "cast_215:in0"],
                   ["split:out40", "greater_214:in1"], ["add_218:out0", "add_217:in0"],
                   ["cast_217:out0", "add_217:in1"], ["greater_216:out0", "cast_216:in0"],
                   ["split:out39", "greater_215:in1"], ["add_219:out0", "add_218:in0"],
                   ["cast_218:out0", "add_218:in1"], ["greater_217:out0", "cast_217:in0"],
                   ["split:out38", "greater_216:in1"], ["add_220:out0", "add_219:in0"],
                   ["cast_219:out0", "add_219:in1"], ["greater_218:out0", "cast_218:in0"],
                   ["split:out37", "greater_217:in1"], ["add_221:out0", "add_220:in0"],
                   ["cast_220:out0", "add_220:in1"], ["greater_219:out0", "cast_219:in0"],
                   ["split:out36", "greater_218:in1"], ["add_222:out0", "add_221:in0"],
                   ["cast_221:out0", "add_221:in1"], ["greater_220:out0", "cast_220:in0"],
                   ["split:out35", "greater_219:in1"], ["add_223:out0", "add_222:in0"],
                   ["cast_222:out0", "add_222:in1"], ["greater_221:out0", "cast_221:in0"],
                   ["split:out34", "greater_220:in1"], ["add_224:out0", "add_223:in0"],
                   ["cast_223:out0", "add_223:in1"], ["greater_222:out0", "cast_222:in0"],
                   ["split:out33", "greater_221:in1"], ["add_225:out0", "add_224:in0"],
                   ["cast_224:out0", "add_224:in1"], ["greater_223:out0", "cast_223:in0"],
                   ["split:out32", "greater_222:in1"], ["add_226:out0", "add_225:in0"],
                   ["cast_225:out0", "add_225:in1"], ["greater_224:out0", "cast_224:in0"],
                   ["split:out31", "greater_223:in1"], ["add_227:out0", "add_226:in0"],
                   ["cast_226:out0", "add_226:in1"], ["greater_225:out0", "cast_225:in0"],
                   ["split:out30", "greater_224:in1"], ["add_228:out0", "add_227:in0"],
                   ["cast_227:out0", "add_227:in1"], ["greater_226:out0", "cast_226:in0"],
                   ["split:out29", "greater_225:in1"], ["add_229:out0", "add_228:in0"],
                   ["cast_228:out0", "add_228:in1"], ["greater_227:out0", "cast_227:in0"],
                   ["split:out28", "greater_226:in1"], ["add_230:out0", "add_229:in0"],
                   ["cast_229:out0", "add_229:in1"], ["greater_228:out0", "cast_228:in0"],
                   ["split:out27", "greater_227:in1"], ["add_231:out0", "add_230:in0"],
                   ["cast_230:out0", "add_230:in1"], ["greater_229:out0", "cast_229:in0"],
                   ["split:out26", "greater_228:in1"], ["add_232:out0", "add_231:in0"],
                   ["cast_231:out0", "add_231:in1"], ["greater_230:out0", "cast_230:in0"],
                   ["split:out25", "greater_229:in1"], ["add_233:out0", "add_232:in0"],
                   ["cast_232:out0", "add_232:in1"], ["greater_231:out0", "cast_231:in0"],
                   ["split:out24", "greater_230:in1"], ["add_234:out0", "add_233:in0"],
                   ["cast_233:out0", "add_233:in1"], ["greater_232:out0", "cast_232:in0"],
                   ["split:out23", "greater_231:in1"], ["add_235:out0", "add_234:in0"],
                   ["cast_234:out0", "add_234:in1"], ["greater_233:out0", "cast_233:in0"],
                   ["split:out22", "greater_232:in1"], ["add_236:out0", "add_235:in0"],
                   ["cast_235:out0", "add_235:in1"], ["greater_234:out0", "cast_234:in0"],
                   ["split:out21", "greater_233:in1"], ["add_237:out0", "add_236:in0"],
                   ["cast_236:out0", "add_236:in1"], ["greater_235:out0", "cast_235:in0"],
                   ["split:out20", "greater_234:in1"], ["add_238:out0", "add_237:in0"],
                   ["cast_237:out0", "add_237:in1"], ["greater_236:out0", "cast_236:in0"],
                   ["split:out19", "greater_235:in1"], ["add_239:out0", "add_238:in0"],
                   ["cast_238:out0", "add_238:in1"], ["greater_237:out0", "cast_237:in0"],
                   ["split:out18", "greater_236:in1"], ["add_240:out0", "add_239:in0"],
                   ["cast_239:out0", "add_239:in1"], ["greater_238:out0", "cast_238:in0"],
                   ["split:out17", "greater_237:in1"], ["add_241:out0", "add_240:in0"],
                   ["cast_240:out0", "add_240:in1"], ["greater_239:out0", "cast_239:in0"],
                   ["split:out16", "greater_238:in1"], ["add_242:out0", "add_241:in0"],
                   ["cast_241:out0", "add_241:in1"], ["greater_240:out0", "cast_240:in0"],
                   ["split:out15", "greater_239:in1"], ["add_243:out0", "add_242:in0"],
                   ["cast_242:out0", "add_242:in1"], ["greater_241:out0", "cast_241:in0"],
                   ["split:out14", "greater_240:in1"], ["add_244:out0", "add_243:in0"],
                   ["cast_243:out0", "add_243:in1"], ["greater_242:out0", "cast_242:in0"],
                   ["split:out13", "greater_241:in1"], ["add_245:out0", "add_244:in0"],
                   ["cast_244:out0", "add_244:in1"], ["greater_243:out0", "cast_243:in0"],
                   ["split:out12", "greater_242:in1"], ["add_246:out0", "add_245:in0"],
                   ["cast_245:out0", "add_245:in1"], ["greater_244:out0", "cast_244:in0"],
                   ["split:out11", "greater_243:in1"], ["add_247:out0", "add_246:in0"],
                   ["cast_246:out0", "add_246:in1"], ["greater_245:out0", "cast_245:in0"],
                   ["split:out10", "greater_244:in1"], ["add_248:out0", "add_247:in0"],
                   ["cast_247:out0", "add_247:in1"], ["greater_246:out0", "cast_246:in0"],
                   ["split:out9", "greater_245:in1"], ["add_249:out0", "add_248:in0"],
                   ["cast_248:out0", "add_248:in1"], ["greater_247:out0", "cast_247:in0"],
                   ["split:out8", "greater_246:in1"], ["add_250:out0", "add_249:in0"],
                   ["cast_249:out0", "add_249:in1"], ["greater_248:out0", "cast_248:in0"],
                   ["split:out7", "greater_247:in1"], ["add_251:out0", "add_250:in0"],
                   ["cast_250:out0", "add_250:in1"], ["greater_249:out0", "cast_249:in0"],
                   ["split:out6", "greater_248:in1"], ["add_252:out0", "add_251:in0"],
                   ["cast_251:out0", "add_251:in1"], ["greater_250:out0", "cast_250:in0"],
                   ["split:out5", "greater_249:in1"], ["add_253:out0", "add_252:in0"],
                   ["cast_252:out0", "add_252:in1"], ["greater_251:out0", "cast_251:in0"],
                   ["split:out4", "greater_250:in1"], ["add_254:out0", "add_253:in0"],
                   ["cast_253:out0", "add_253:in1"], ["greater_252:out0", "cast_252:in0"],
                   ["split:out3", "greater_251:in1"], ["variable:out0", "add_254:in0"],
                   ["cast_254:out0", "add_254:in1"], ["greater_253:out0", "cast_253:in0"],
                   ["split:out2", "greater_252:in1"], ["greater_254:out0", "cast_254:in0"],
                   ["split:out1", "greater_253:in1"], ["split:out0", "greater_254:in1"]],
"src_in_anchor": [["I_0:out0", "split:in0"], ["I_1:out0", "greater:in0"], ["I_1:out0", "greater_1:in0"],
                  ["I_1:out0", "greater_2:in0"], ["I_1:out0", "greater_3:in0"], ["I_1:out0", "greater_4:in0"],
                  ["I_1:out0", "greater_5:in0"], ["I_1:out0", "greater_6:in0"], ["I_1:out0", "greater_7:in0"],
                  ["I_1:out0", "greater_8:in0"], ["I_1:out0", "greater_9:in0"], ["I_1:out0", "greater_10:in0"],
                  ["I_1:out0", "greater_11:in0"], ["I_1:out0", "greater_12:in0"], ["I_1:out0", "greater_13:in0"],
                  ["I_1:out0", "greater_14:in0"], ["I_1:out0", "greater_15:in0"], ["I_1:out0", "greater_16:in0"],
                  ["I_1:out0", "greater_17:in0"], ["I_1:out0", "greater_18:in0"], ["I_1:out0", "greater_19:in0"],
                  ["I_1:out0", "greater_20:in0"], ["I_1:out0", "greater_21:in0"], ["I_1:out0", "greater_22:in0"],
                  ["I_1:out0", "greater_23:in0"], ["I_1:out0", "greater_24:in0"], ["I_1:out0", "greater_25:in0"],
                  ["I_1:out0", "greater_26:in0"], ["I_1:out0", "greater_27:in0"], ["I_1:out0", "greater_28:in0"],
                  ["I_1:out0", "greater_29:in0"], ["I_1:out0", "greater_30:in0"], ["I_1:out0", "greater_31:in0"],
                  ["I_1:out0", "greater_32:in0"], ["I_1:out0", "greater_33:in0"], ["I_1:out0", "greater_34:in0"],
                  ["I_1:out0", "greater_35:in0"], ["I_1:out0", "greater_36:in0"], ["I_1:out0", "greater_37:in0"],
                  ["I_1:out0", "greater_38:in0"], ["I_1:out0", "greater_39:in0"], ["I_1:out0", "greater_40:in0"],
                  ["I_1:out0", "greater_41:in0"], ["I_1:out0", "greater_42:in0"], ["I_1:out0", "greater_43:in0"],
                  ["I_1:out0", "greater_44:in0"], ["I_1:out0", "greater_45:in0"], ["I_1:out0", "greater_46:in0"],
                  ["I_1:out0", "greater_47:in0"], ["I_1:out0", "greater_48:in0"], ["I_1:out0", "greater_49:in0"],
                  ["I_1:out0", "greater_50:in0"], ["I_1:out0", "greater_51:in0"], ["I_1:out0", "greater_52:in0"],
                  ["I_1:out0", "greater_53:in0"], ["I_1:out0", "greater_54:in0"], ["I_1:out0", "greater_55:in0"],
                  ["I_1:out0", "greater_56:in0"], ["I_1:out0", "greater_57:in0"], ["I_1:out0", "greater_58:in0"],
                  ["I_1:out0", "greater_59:in0"], ["I_1:out0", "greater_60:in0"], ["I_1:out0", "greater_61:in0"],
                  ["I_1:out0", "greater_62:in0"], ["I_1:out0", "greater_63:in0"], ["I_1:out0", "greater_64:in0"],
                  ["I_1:out0", "greater_65:in0"], ["I_1:out0", "greater_66:in0"], ["I_1:out0", "greater_67:in0"],
                  ["I_1:out0", "greater_68:in0"], ["I_1:out0", "greater_69:in0"], ["I_1:out0", "greater_70:in0"],
                  ["I_1:out0", "greater_71:in0"], ["I_1:out0", "greater_72:in0"], ["I_1:out0", "greater_73:in0"],
                  ["I_1:out0", "greater_74:in0"], ["I_1:out0", "greater_75:in0"], ["I_1:out0", "greater_76:in0"],
                  ["I_1:out0", "greater_77:in0"], ["I_1:out0", "greater_78:in0"], ["I_1:out0", "greater_79:in0"],
                  ["I_1:out0", "greater_80:in0"], ["I_1:out0", "greater_81:in0"], ["I_1:out0", "greater_82:in0"],
                  ["I_1:out0", "greater_83:in0"], ["I_1:out0", "greater_84:in0"], ["I_1:out0", "greater_85:in0"],
                  ["I_1:out0", "greater_86:in0"], ["I_1:out0", "greater_87:in0"], ["I_1:out0", "greater_88:in0"],
                  ["I_1:out0", "greater_89:in0"], ["I_1:out0", "greater_90:in0"], ["I_1:out0", "greater_91:in0"],
                  ["I_1:out0", "greater_92:in0"], ["I_1:out0", "greater_93:in0"], ["I_1:out0", "greater_94:in0"],
                  ["I_1:out0", "greater_95:in0"], ["I_1:out0", "greater_96:in0"], ["I_1:out0", "greater_97:in0"],
                  ["I_1:out0", "greater_98:in0"], ["I_1:out0", "greater_99:in0"], ["I_1:out0", "greater_100:in0"],
                  ["I_1:out0", "greater_101:in0"], ["I_1:out0", "greater_102:in0"], ["I_1:out0", "greater_103:in0"],
                  ["I_1:out0", "greater_104:in0"], ["I_1:out0", "greater_105:in0"], ["I_1:out0", "greater_106:in0"],
                  ["I_1:out0", "greater_107:in0"], ["I_1:out0", "greater_108:in0"], ["I_1:out0", "greater_109:in0"],
                  ["I_1:out0", "greater_110:in0"], ["I_1:out0", "greater_111:in0"], ["I_1:out0", "greater_112:in0"],
                  ["I_1:out0", "greater_113:in0"], ["I_1:out0", "greater_114:in0"], ["I_1:out0", "greater_115:in0"],
                  ["I_1:out0", "greater_116:in0"], ["I_1:out0", "greater_117:in0"], ["I_1:out0", "greater_118:in0"],
                  ["I_1:out0", "greater_119:in0"], ["I_1:out0", "greater_120:in0"], ["I_1:out0", "greater_121:in0"],
                  ["I_1:out0", "greater_122:in0"], ["I_1:out0", "greater_123:in0"], ["I_1:out0", "greater_124:in0"],
                  ["I_1:out0", "greater_125:in0"], ["I_1:out0", "greater_126:in0"], ["I_1:out0", "greater_127:in0"],
                  ["I_1:out0", "greater_128:in0"], ["I_1:out0", "greater_129:in0"], ["I_1:out0", "greater_130:in0"],
                  ["I_1:out0", "greater_131:in0"], ["I_1:out0", "greater_132:in0"], ["I_1:out0", "greater_133:in0"],
                  ["I_1:out0", "greater_134:in0"], ["I_1:out0", "greater_135:in0"], ["I_1:out0", "greater_136:in0"],
                  ["I_1:out0", "greater_137:in0"], ["I_1:out0", "greater_138:in0"], ["I_1:out0", "greater_139:in0"],
                  ["I_1:out0", "greater_140:in0"], ["I_1:out0", "greater_141:in0"], ["I_1:out0", "greater_142:in0"],
                  ["I_1:out0", "greater_143:in0"], ["I_1:out0", "greater_144:in0"], ["I_1:out0", "greater_145:in0"],
                  ["I_1:out0", "greater_146:in0"], ["I_1:out0", "greater_147:in0"], ["I_1:out0", "greater_148:in0"],
                  ["I_1:out0", "greater_149:in0"], ["I_1:out0", "greater_150:in0"], ["I_1:out0", "greater_151:in0"],
                  ["I_1:out0", "greater_152:in0"], ["I_1:out0", "greater_153:in0"], ["I_1:out0", "greater_154:in0"],
                  ["I_1:out0", "greater_155:in0"], ["I_1:out0", "greater_156:in0"], ["I_1:out0", "greater_157:in0"],
                  ["I_1:out0", "greater_158:in0"], ["I_1:out0", "greater_159:in0"], ["I_1:out0", "greater_160:in0"],
                  ["I_1:out0", "greater_161:in0"], ["I_1:out0", "greater_162:in0"], ["I_1:out0", "greater_163:in0"],
                  ["I_1:out0", "greater_164:in0"], ["I_1:out0", "greater_165:in0"], ["I_1:out0", "greater_166:in0"],
                  ["I_1:out0", "greater_167:in0"], ["I_1:out0", "greater_168:in0"], ["I_1:out0", "greater_169:in0"],
                  ["I_1:out0", "greater_170:in0"], ["I_1:out0", "greater_171:in0"], ["I_1:out0", "greater_172:in0"],
                  ["I_1:out0", "greater_173:in0"], ["I_1:out0", "greater_174:in0"], ["I_1:out0", "greater_175:in0"],
                  ["I_1:out0", "greater_176:in0"], ["I_1:out0", "greater_177:in0"], ["I_1:out0", "greater_178:in0"],
                  ["I_1:out0", "greater_179:in0"], ["I_1:out0", "greater_180:in0"], ["I_1:out0", "greater_181:in0"],
                  ["I_1:out0", "greater_182:in0"], ["I_1:out0", "greater_183:in0"], ["I_1:out0", "greater_184:in0"],
                  ["I_1:out0", "greater_185:in0"], ["I_1:out0", "greater_186:in0"], ["I_1:out0", "greater_187:in0"],
                  ["I_1:out0", "greater_188:in0"], ["I_1:out0", "greater_189:in0"], ["I_1:out0", "greater_190:in0"],
                  ["I_1:out0", "greater_191:in0"], ["I_1:out0", "greater_192:in0"], ["I_1:out0", "greater_193:in0"],
                  ["I_1:out0", "greater_194:in0"], ["I_1:out0", "greater_195:in0"], ["I_1:out0", "greater_196:in0"],
                  ["I_1:out0", "greater_197:in0"], ["I_1:out0", "greater_198:in0"], ["I_1:out0", "greater_199:in0"],
                  ["I_1:out0", "greater_200:in0"], ["I_1:out0", "greater_201:in0"], ["I_1:out0", "greater_202:in0"],
                  ["I_1:out0", "greater_203:in0"], ["I_1:out0", "greater_204:in0"], ["I_1:out0", "greater_205:in0"],
                  ["I_1:out0", "greater_206:in0"], ["I_1:out0", "greater_207:in0"], ["I_1:out0", "greater_208:in0"],
                  ["I_1:out0", "greater_209:in0"], ["I_1:out0", "greater_210:in0"], ["I_1:out0", "greater_211:in0"],
                  ["I_1:out0", "greater_212:in0"], ["I_1:out0", "greater_213:in0"], ["I_1:out0", "greater_214:in0"],
                  ["I_1:out0", "greater_215:in0"], ["I_1:out0", "greater_216:in0"], ["I_1:out0", "greater_217:in0"],
                  ["I_1:out0", "greater_218:in0"], ["I_1:out0", "greater_219:in0"], ["I_1:out0", "greater_220:in0"],
                  ["I_1:out0", "greater_221:in0"], ["I_1:out0", "greater_222:in0"], ["I_1:out0", "greater_223:in0"],
                  ["I_1:out0", "greater_224:in0"], ["I_1:out0", "greater_225:in0"], ["I_1:out0", "greater_226:in0"],
                  ["I_1:out0", "greater_227:in0"], ["I_1:out0", "greater_228:in0"], ["I_1:out0", "greater_229:in0"],
                  ["I_1:out0", "greater_230:in0"], ["I_1:out0", "greater_231:in0"], ["I_1:out0", "greater_232:in0"],
                  ["I_1:out0", "greater_233:in0"], ["I_1:out0", "greater_234:in0"], ["I_1:out0", "greater_235:in0"],
                  ["I_1:out0", "greater_236:in0"], ["I_1:out0", "greater_237:in0"], ["I_1:out0", "greater_238:in0"],
                  ["I_1:out0", "greater_239:in0"], ["I_1:out0", "greater_240:in0"], ["I_1:out0", "greater_241:in0"],
                  ["I_1:out0", "greater_242:in0"], ["I_1:out0", "greater_243:in0"], ["I_1:out0", "greater_244:in0"],
                  ["I_1:out0", "greater_245:in0"], ["I_1:out0", "greater_246:in0"], ["I_1:out0", "greater_247:in0"],
                  ["I_1:out0", "greater_248:in0"], ["I_1:out0", "greater_249:in0"], ["I_1:out0", "greater_250:in0"],
                  ["I_1:out0", "greater_251:in0"], ["I_1:out0", "greater_252:in0"], ["I_1:out0", "greater_253:in0"],
                  ["I_1:out0", "greater_254:in0"]],
"src_out_tensor": ["add:out0"],
"acu_lys_alias": ["bucketize"],
"src_acu_in_tensor_map": [["I_0:out0", "bucketize:in1"], ["I_1:out0", "bucketize:in0"]],
"src_acu_out_tensor_map": [["add:out0", "bucketize:out0"]],
"acu_inter_flow": [],
"param_map": {"bucketize": {}},
"blob_map": {"bucketize": {}},
"priority_tip": 0,
"pre_condition": None,
"src_ops_main_version": None,
"src_ops_minior_version": [1, -1]}
ruler_list.append(r_bucktize)

r_layernormal = {
"ruler_name": 'r_layernormal',
"src_ops_alias": ["add", "multiply", "Subtract", "rsqrt", "variable", "multiply_1", "add_1", "reducemean",
                  "reducemean_1", "variable_1", "squared_difference"],
"src_inter_flow": [["multiply:out0", "add:in0"], ["Subtract:out0", "add:in1"], ["rsqrt:out0", "multiply:in1"],
                   ["variable:out0", "Subtract:in0"], ["multiply_1:out0", "Subtract:in1"], ["add_1:out0", "rsqrt:in0"],
                   ["reducemean:out0", "multiply_1:in0"], ["rsqrt:out0", "multiply_1:in1"],
                   ["reducemean_1:out0", "add_1:in0"], ["variable_1:out0", "add_1:in1"],
                   ["squared_difference:out0", "reducemean_1:in0"], ["reducemean:out0", "squared_difference:in1"]],
"src_in_anchor": [["I_0:out0", "reducemean:in0"], ["I_0:out0", "squared_difference:in0"],
                  ["I_0:out0", "multiply:in0"]],
"src_out_tensor": ["add:out0"],
"acu_lys_alias": ["layernormalize"],
"src_acu_in_tensor_map": [["I_0:out0", "layernormalize:in0"]],
"src_acu_out_tensor_map": [["add:out0", "layernormalize:out0"]],
"acu_inter_flow": [],
"param_map": {"layernormalize": {
    'eps': ['FLOAT', 'CODE', "self.tensor_to_numpy(tensor['variable_1:out0'], 'data')"],
    'axis_list': ['INTS', 'CODE', "self.attr_pick(node['reducemean'], 'axis_list')"],

}},
"blob_map": {
    "layernormalize": {'bias': ['CODE', "self.get_value_attr(node['variable'], 'data')"],
                       'scale': ['CODE', "self.fill_constant_tensor(1, self.get_output_shape(node['variable']))"],
                       }
},
"priority_tip": 0,
"pre_condition": None,
"src_ops_main_version": None,
"src_ops_minior_version": [1, -1]}
ruler_list.append(r_layernormal)


def gen_acuity_ruler(dst_path):
    # print(json.dumps(ruler_list))
    dst_path = os.path.join(dst_path, 'ac_ruler_db.json')

    with open(dst_path, 'w+') as f:
        json.dump(ruler_list, f, indent=1)

    # To Verify ruler follow synatx
    with open(dst_path, 'r') as f:
        x_val = json.load(f)

def main():
    gen_acuity_ruler(sys.argv[1])

if __name__ == '__main__':
    main()
